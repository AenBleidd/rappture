#! /bin/sh
# ----------------------------------------------------------------------
# RAPPTURE REGRESSION TESTER
#
# This program will read a set of test xml files typically located in
# a tool's "tests" subdirectory, and provide an interactive test suite.
# The test xml files should contain a complete set of inputs and outputs
# for one run of an application.  In each test xml, a label must be
# located at the path test.label.  Test labels may be organized
# hierarchically by using dots to separate components of the test label
# (example: roomtemp.1eV).  A description may optionally be located at
# the path test.description.  Input arguments are the path to the
# tool.xml of the version being tested, and the path the the directory
# containing a set of test xml files.  If the arguments are missing,
# the program will attempt to locate them automatically.
#
# USAGE: tester.tcl ?-tool tool.xml? ?-testdir tests?
# ======================================================================
#  AUTHOR:  Ben Rafferty, Purdue University
#  Copyright (c) 2010  Purdue Research Foundation
#
#  See the file "license.terms" for information on usage and
#  redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# ======================================================================
#\
exec tclsh "$0" $*
# ----------------------------------------------------------------------
# wish executes everything from here on...

# TODO: Won't need this once tied in with the rest of the package 
lappend auto_path [file dirname $argv0]

package require Itk
package require Rappture
package require RapptureGUI

Rappture::getopts argv params {
    value -tool ""
    value -testdir ""
}

# If tool.xml and test directory locations are not given, try to find them.
if {$params(-tool) == ""} {
    if {[file exists tool.xml]} {
        set params(-tool) tool.xml
    } elseif {[file exists [file join rappture tool.xml]]} {
        set params(-tool) [file join rappture tool.xml]
    } else {
        error "Cannot find tool.xml"
    }
}

if {$params(-testdir) == ""} {
    set tooldir [file dirname $params(-tool)]
    if {[file isdirectory [file join $tooldir tests]]} {
        set params(-testdir) [file join $tooldir tests]
    } elseif {[file isdirectory [file join [file dirname $tooldir] tests]]} {
        set params(-testdir) [file join [file dirname $tooldir] tests]
    } else {
        error "Cannot find test directory."
    }
}

# ----------------------------------------------------------------------
# INITIALIZE WINDOW
# ----------------------------------------------------------------------
wm title . "Rappture Regression Tester"
panedwindow .pw
.pw add [Rappture::Tester::TestTree .tree \
    -testdir $params(-testdir) \
    -command Rappture::Tester::runSelected \
    -selectcommand Rappture::Tester::selectionHandler]
.pw add [frame .right]
Rappture::Tester::TestView .right.view $params(-tool)
button .right.regoldenize -text "Regoldenize" -state disabled \
    -command Rappture::Tester::regoldenize
pack .right.regoldenize -side bottom -anchor e
pack .right.view -side bottom -expand yes -fill both
pack .pw -expand yes -fill both
set curselection ""

# TODO: Handle resizing better
# TODO: Fix error that occurs only when you click and hold on a test
#       while the right hand side is empty

# ----------------------------------------------------------------------
# USAGE: runSelected
#
# When this method is invoked, all tests that are currently selected
# will be ran.  If a branch node (folder) is selected, all of its
# descendant tests will be ran as well.
# TODO: Parallel exection
# ----------------------------------------------------------------------
proc Rappture::Tester::runSelected {} {
    foreach id [.tree getSelected] {
        runTest $id
    }
    selectionHandler -forcerefresh
}

# ----------------------------------------------------------------------
# USAGE: runTest <id>
#
# Called by runAll and runSelected to run a single test at the tree node
# specified by the given id.  In most cases, this method should not be
# called directly.  A driver object appropriate for running the test is 
# generated by the makeDriver procedure, and the results given by the 
# new version are compared to the golden result by the compare
# procedure.
# ----------------------------------------------------------------------
proc Rappture::Tester::runTest {id} {
    array set darray [.tree getData $id]
    global params
    set darray(result) "Running"
    .tree setData $id [array get darray]

    set driver [Rappture::Tester::makeDriver $params(-tool) $darray(testxml)]
    set tool [Rappture::Tool ::#auto $driver [file dirname $params(-tool)]]
    foreach {status result} [eval $tool run] break
    set darray(ran) yes
    if {$status == 0 && [Rappture::library isvalid $result]} {
        set golden [Rappture::library $darray(testxml)]
        set diffs [Rappture::Tester::compare $golden $result]
        set missing [Rappture::Tester::missing $golden $result]
        set added [Rappture::Tester::added $golden $result]
        if {$diffs == "" && $missing == "" && $added == ""} {
            set darray(result) Pass
        } else {
            set darray(result) Fail
        }
        set darray(diffs) $diffs
        set darray(missing) $missing
        set darray(added) $added
        set darray(runfile) [$tool getRunFile]
    } else {
        set darray(result) Error
        set darray(runfile) ""
    }
    .tree setData $id [array get darray]
}

# ----------------------------------------------------------------------
# USAGE: selectionHandler ?-forcerefresh?
#
# Used internally to communicate between the test tree and the right
# hand side viewer.  Upon selecting a new tree node, pass the focused
# node's data to the right hand side.
# ----------------------------------------------------------------------
proc Rappture::Tester::selectionHandler {args} {
    if {[llength $args] > 1} {
        error "wrong # args: should be \"selectionHandler ?-forcerefresh?\""
    }
    global curselection
    set sel [.tree getFocus]
    if {$sel != $curselection || [lindex $args 0] == "-forcerefresh"} {
        set data [.tree getData focus]
        .right.view configure -data $data 
        array set darray $data
        if {[array names darray] != "" && $darray(ran)} {
            .right.regoldenize configure -state normal
        } else {
            .right.regoldenize configure -state disabled
        }
        set curselection $sel
    }
}

# ----------------------------------------------------------------------
# USAGE: makeDriver <tool.xml> <test.xml>
#
# Builds and returns a driver library object to be used for running the 
# test specified by testxml.  Copy current values from test xml into the
# newly created driver.  If any inputs are present in the new tool.xml 
# which do not exist in the test xml, use the default value.
# ----------------------------------------------------------------------
proc Rappture::Tester::makeDriver {toolxml testxml} {
    # TODO: Test with various cases, especially with missing input elements
    # TODO: Any way to copy an object rather than creating a duplicate?
    # TODO: Sensible way of combining this proc with "merge" below?
    set toolobj [Rappture::library $toolxml]
    set golden [Rappture::library $testxml]
    set driver [Rappture::library $toolxml]
    return [Rappture::Tester::merge $toolobj $golden $driver]
}

# ----------------------------------------------------------------------
# USAGE: merge <toolobj> <golden> <driver> ?path?
#
# Used to recursively build up a driver library object for running a
# test.  Should not be called directly - see makeDriver.
# ----------------------------------------------------------------------
proc Rappture::Tester::merge {toolobj golden driver {path input}} {
    foreach child [$toolobj children $path] {
        set val [$golden get $path.$child.current]
        if {$val != ""} {
            $driver put $path.$child.current $val
        } else {
            set def [$toolobj get $path.$child.default]
            if {$def != ""} {
                $driver put $path.$child.current $def
            }
        }
        Rappture::Tester::merge $toolobj $golden $driver $path.$child
    }
    return $driver
}

# ----------------------------------------------------------------------
# USAGE: regoldenize
#
# Regoldenizes the currently focused test case.  Displays a warning
# message.  If confirmed, copy the test information from the existing
# test xml into the new result, and write the new data into the test
# xml.
# ----------------------------------------------------------------------
proc Rappture::Tester::regoldenize {} {
    set data [.tree getData focus]
    array set darray $data
    if {[tk_messageBox -type yesno -icon warning -message "Are you sure you want to regoldenize?\n$darray(testxml) will be overwritten."]} {
        # Copy test info from existing test xml
        set newlib [Rappture::library $darray(runfile)]
        set oldlib [Rappture::library $darray(testxml)]
        $newlib put test.label [$oldlib get test.label]
        $newlib put test.description [$oldlib get test.description]
        # Overwrite test xml
        set fid [open $darray(testxml) w]
        puts $fid "<?xml version=\"1.0\"?>" 
        puts $fid [$newlib xml]
        close $fid
        # Update tree data accordingly
        set darray(result) "Pass"
        .tree setData focus [array get darray]
        # Refresh right hand side view
        selectionHandler -forcerefresh
    }
}

