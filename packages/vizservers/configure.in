AC_INIT(vizservers, 0.1, rappture@nanohub.org)
AC_CONFIG_HEADER(nanoscale/config.h)

VERSION=0.0.1
AC_SUBST(VERSION)

#------------------------------------------------------------------------
# Handle the --prefix=... option
#------------------------------------------------------------------------

if test "${prefix}" = "NONE"; then
    prefix=/usr/local
fi
if test "${exec_prefix}" = "NONE"; then
    exec_prefix=$prefix
fi

if test "${libdir}" != "${prefix}/lib"; then
    LIB_SEARCH_DIRS="-L ${prefix}/lib -L ${libdir}"
else
    LIB_SEARCH_DIRS="-L ${libdir}"
fi

SC_CONFIG_CFLAGS

AC_SUBST(CFLAGS_DEBUG)
AC_SUBST(CFLAGS_OPTIMIZE)
AC_SUBST(STLIB_LD)
AC_SUBST(SHLIB_LD)
AC_SUBST(SHLIB_CFLAGS)
AC_SUBST(SHLIB_LDFLAGS)
AC_SUBST(SHLIB_SUFFIX)

AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_LN_S
AC_PROG_MKDIR_P

dnl find and test the C compiler
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXXCPP
AC_PROG_CXX
AC_LANG_CPLUSPLUS

AC_C_BIGENDIAN

SUBDIRS="nanoscale nanovis pymolproxy"
AC_SUBST(SUBDIRS)

AC_ARG_WITH(
    [tcllib],
    [AS_HELP_STRING([--with-tcllib[=DIR]],
        [location of Tcl binary library libtclstubs.a @<:@default=/usr/lib@:>@])],
    [with_tcllib=$withval],
    [with_tcllib=""])

#
# Need to check for the following dependencies:
#	Rappture headers and library (done)
#       Tcl headers and library (done)
#       GL headers and library
#       GLuT headers and library
#       GLui header and library
#       GLEW header and library
#       Cg headers and library
#       CgGL headers and library
#       pthread library
#       DX headers and library (done, sort of)
#

TCL_VERSION="8.4"
for dir in \
 ${exec_prefix} \
 ${exec_prefix}/lib \
 ${with_rappture} \
 ${with_rappture}/lib ; do
  tclconfig="${dir}/tclConfig.sh"
  if test -f "$tclconfig" ; then
    . $tclconfig
    break
  fi
done
TCL_INC_SPEC="$TCL_INCLUDE_SPEC"

if test "x$with_tcllib" != "x" ; then
   tclconfig="${with_tcllib}/tclConfig.sh"
   if test -f "$tclconfig" ; then
    . $tclconfig
   fi
   TCL_LIB_SPEC="-L${with_tcllib} -ltcl${TCL_VERSION}"
fi
if test "x$with_tclinclude" != "x" ; then
   TCL_INC_SPEC="-I${with_tclinclude}"
fi

AC_SUBST(TCL_VERSION)
AC_SUBST(TCL_INC_SPEC)
AC_SUBST(TCL_LIB_SPEC)

AC_ARG_WITH(
    [rappture],
    [AS_HELP_STRING([--with-rappture[=DIR]],
        [location of rappture files lib/librappture2.a and include/rappture2/rappture2.h @<:@default=/usr@:>@])],
    [with_rappture=$withval],
    [with_rappture=/usr])

RP2_INCL_DIR=""
RP_DIR=""
AC_MSG_CHECKING([for rappture])
if test "x$with_rappture" != "x" ; then
    if test "x$with_rappture" != "xprefix" ; then
        if test -f "$with_rappture"
        then
            AC_MSG_RESULT([no])
            AC_MSG_ERROR([please provide --with-rappture with directory])
        else
            if test -d "$with_rappture"
            then
                if test -r "$with_rappture/include/rappture2/rappture2.h" -a -r "$with_rappture/lib/librappture2.a"
                then
                    RP2_INCL_DIR="$with_rappture/include/rappture2"
                    RP_DIR="$with_rappture"
                    AC_MSG_RESULT([yes])
                else
                    AC_MSG_RESULT([no])
                    AC_MSG_ERROR([cannot find rappture2.h and librappture2.a, try using --with-rappture])
                fi
            else
                AC_MSG_RESULT([no])
                AC_MSG_ERROR([cannot find rappture2.h and librappture2.a inside $with_rappture, try using --with-rappture])
            fi
        fi
    else
        RP2_INCL_DIR="$prefix/include/rappture2"
        RP_DIR="$prefix"
        AC_MSG_RESULT([set to prefix])
    fi
else
    AC_CHECK_HEADERS([rappture.h], [],
           [AC_MSG_ERROR([cannot find rappture.h, try using --with-rappture])])


fi
AC_MSG_RESULT([${RP_DIR}/include])
AC_SUBST(RP2_INCL_DIR)
AC_SUBST(RP_DIR)

AC_CHECK_HEADER([GL/glui.h])
AC_CHECK_HEADER([glui.h])
AC_CHECK_HEADER([GL/glut.h])
AC_CHECK_HEADER([GL/glew.h])

AC_CHECK_HEADERS([stdio.h unistd.h stdlib.h string.h sys/types.h])
AC_CHECK_HEADERS([sys/socket.h sys/time.h netinet/in.h arpa/inet.h netdb.h])

AC_MSG_CHECKING([for DX installation])
DX_DIR=""
for dir in \
 /apps/rappture \
 /usr/dx \
 /usr
do
  if test -r "${dir}/include/dx/dx.h" ; then
    DX_DIR="$dir"
    break
  fi
done
if test "x${DX_DIR}" = "x" ; then
  AC_MSG_ERROR([can't find OpenDX installation])
fi
if test "${DX_DIR}" = "/usr" ; then
  DX_DIR=""
fi
AC_SUBST(DX_DIR)
AC_MSG_RESULT([${DX_DIR}])

dnl AC_MSG_CHECKING(tcl library version)
dnl TCL=`AC_TRY_RUN([#include <tcl.h>
dnl         int main() {printf("tcl%s",TCL_VERSION);return(0);}],,
dnl         echo "tcl8.4", echo "tcl8.4")`
dnl AC_MSG_RESULT($TCL)
dnl AC_MSG_CHECKING(tk library version)
dnl TK=`AC_TRY_RUN([#include <tk.h>
dnl         main() {printf("tk%s", TK_VERSION); exit(0);}],,
dnl         echo "tk8.4", echo "tk8.4")`
dnl AC_MSG_RESULT($TK)


AC_OUTPUT(  Makefile \
            nanoscale/Makefile \
            nanovis/Makefile \
            nanovis/newmat11/Makefile \
            nanovis/R2/src/Makefile \
            nanovis/imgLoaders/Makefile \
            nanovis/transfer-function/Makefile \
            pymolproxy/Makefile \
            start_viz.sh    )
