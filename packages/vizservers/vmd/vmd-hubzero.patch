diff -u -r ../orig/plugins/Make-arch ./plugins/Make-arch
--- ../orig/plugins/Make-arch	2011-09-17 22:55:03.000000000 -0400
+++ ./plugins/Make-arch	2013-12-23 16:32:12.000000000 -0500
@@ -365,7 +365,7 @@
 	"DEF = -D" \
 	"CCFLAGS = -m64 -O2 -fPIC -Wall" \
 	"CXXFLAGS = -m64 -O2 -fPIC -Wall" \
-	"TCLLDFLAGS = -ltcl8.5 -ldl" \
+	"TCLLDFLAGS = -ltcl8.4 -ldl" \
 	"NETCDFLDFLAGS = -lnetcdf " \
 	"AR = ar" \
 	"NM = nm -p" \
diff -u -r ../orig/vmd-1.9.1/configure.options ./vmd-1.9.1/configure.options
--- ../orig/vmd-1.9.1/configure.options	2012-02-02 02:53:54.000000000 -0500
+++ ./vmd-1.9.1/configure.options	2013-12-23 16:32:12.000000000 -0500
@@ -1 +1 @@
-WIN32 TCL MSVC
+LINUXAMD64 OPENGL TK IMD XINPUT TCL PTHREADS
diff -u -r ../orig/vmd-1.9.1/src/Makefile ./vmd-1.9.1/src/Makefile
--- ../orig/vmd-1.9.1/src/Makefile	2012-02-02 02:54:49.000000000 -0500
+++ ./vmd-1.9.1/src/Makefile	2013-12-23 18:36:37.000000000 -0500
@@ -1,6 +1,6 @@
 
 # Makefile for vmd
-# VMD for WIN32, version 1.9.1 (February 1, 2012)
+# VMD for LINUXAMD64, version 1.9.1 (December 20, 2013)
 
 #.SILENT:
 
@@ -16,15 +16,25 @@
 COMPRESS    = compress
 GNUCOMPRESS = /usr/local/bin/gzip
 LATEX       = latex
-
+#RAPPTURE    = /opt/hubzero/rappture/vmd
 # makefile configuration
-VPATH                   = .:../WIN32
+VPATH                   = .:../LINUXAMD64
 SHELL                   = /bin/sh
 .SUFFIXES: .C .c .cu ..c .i .o
 
 
 # C++ source files
-VMD_CCPP    =	Animation.C \
+VMD_CCPP    =	OpenGLDisplayDevice.C \
+		OpenGLExtensions.C \
+		OpenGLRenderer.C \
+		OpenGLShader.C \
+		OpenGLCache.C \
+		IMDMgr.C \
+		IMDSim.C \
+		IMDSimThread.C \
+		CmdIMD.C \
+		imd.C \
+		Animation.C \
 		ArtDisplayDevice.C \
 		AtomColor.C \
 		AtomParser.C \
@@ -219,7 +229,17 @@
 VMD_CU      = 	
 
 # Header files
-VMD_H       = 	Animation.h \
+VMD_H       = 	OpenGLDisplayDevice.h \
+		OpenGLExtensions.h \
+		OpenGLRenderer.h \
+		OpenGLShader.h \
+		OpenGLCache.h \
+		imd.h \
+		IMDMgr.h \
+		IMDSim.h \
+		IMDSimThread.h \
+		CmdIMD.h \
+		Animation.h \
 		ArtDisplayDevice.h \
 		Atom.h \
 		AtomColor.h \
@@ -380,42 +400,43 @@
 
 VMD_EXTRA          = 	
 
-VMD_OTHER_EXE      = 	../lib/stride/stride_WIN32 ../lib/surf/surf_WIN32 ../lib/tachyon/tachyon_WIN32
+VMD_OTHER_EXE      = 	../lib/stride/stride_LINUXAMD64 ../lib/surf/surf_LINUXAMD64 ../lib/tachyon/tachyon_LINUXAMD64
 
-VMD_OTHER_NAMES    = 	stride_WIN32
+VMD_OTHER_NAMES    = 	stride_LINUXAMD64
 
 VMD_MAIN_DIR_FILES = 	Announcement FEEDBACK LICENSE README configure
 
 # Turn things into objects
 VMD_OBJS    =   $(VMD_CCPP:.C=.o) $(VMD_CC:.c=.o) $(VMD_CU:.cu=.o)
 
-INCDIRS     = -I../lib/tcl/include -I../plugins/include -I../plugins/WIN32/molfile -I.
 
-LIBS        = -ltcl8.5  -lmolfile_plugin -lm $(VMDEXTRALIBS)
+INCDIRS     =   -I$(RPDIR)/include  -I../lib/tcl/include -I../lib/tk/include -I../plugins/include -I../plugins/LINUXAMD64/molfile -I.
+
+LIBS        = -L$(RPDIR)/lib -lGL -lGLU -lX11  -lXi -lpthread -ltk8.4 -lX11 -ltcl8.4  -lmolfile_plugin -lm -ldl $(VMDEXTRALIBS)
 
-LIBDIRS     = -L../lib/tcl/lib_WIN32  -L../plugins/WIN32/molfile 
+LIBDIRS     =     -L../lib/tcl/lib_LINUXAMD64 -L../lib/tk/lib_LINUXAMD64  -L../plugins/LINUXAMD64/molfile 
 
-DEFINES     = -DVMDQUICKSURF -DVMDWITHCARBS -DVMDPOLYHEDRA -DVMDSURF -DVMDMSMS -DVMDPBCSMOOTH -DVMDTCL  -DVMDSTATICPLUGINS 
+DEFINES     = -DVMDOPENGL -DVMDIMD -DVMDXINPUT -DVMDTHREADS -DWKFTHREADS -DUSEPOSIXTHREADS -D_REENTRANT -DVMDQUICKSURF -DVMDWITHCARBS -DVMDPOLYHEDRA -DVMDSURF -DVMDMSMS -DVMDPBCSMOOTH -DVMDTCL -DVMDTK  -DVMDSTATICPLUGINS 
 
 # compiler and compiler directives 
-CC          = cl.exe
-CFLAGS      =  -DARCH_WIN32 $(DEFINES) $(INCDIRS) 
+CC          = gcc
+CFLAGS      = -m64 -Wall -O6 -ffast-math -DARCH_LINUXAMD64 $(DEFINES) $(INCDIRS) 
 
-CCPP	    = cl.exe
-CPPFLAGS    = /O2 /G5 /nologo /MT /DWIN32 -Dstrcasecmp=strupcmp /TP -DARCH_WIN32 $(DEFINES) $(INCDIRS) 
+CCPP	    = g++
+CPPFLAGS    = -m64 -fno-for-scope -Wno-deprecated -Wall -O6 -ffast-math  -DARCH_LINUXAMD64 $(DEFINES) $(INCDIRS) 
 
 NVCC        = /usr/local/encap/cuda-4.0/bin/nvcc
-NVCCFLAGS   = --ptxas-options=-v -gencode arch=compute_10,code=sm_10 -gencode arch=compute_13,code=sm_13 -gencode arch=compute_20,code=sm_20 --ftz=true  -DARCH_WIN32 $(DEFINES) $(INCDIRS)
+NVCCFLAGS   = --ptxas-options=-v -gencode arch=compute_10,code=sm_10 -gencode arch=compute_13,code=sm_13 -gencode arch=compute_20,code=sm_20 --ftz=true  -DARCH_LINUXAMD64 $(DEFINES) $(INCDIRS)
 
 COMPILERC   = echo
 RCFLAGS     = No resource compiler required on this platform.
 
-DEPEND      = -M
+DEPEND      = -MM
 DEPENDFILE  = Makedata.depend
 
-LOADLIBES   = $(LIBDIRS) $(LIBS) 
+LOADLIBES   = $(LIBDIRS) $(LIBS) -rdynamic
 
-LEX 	    = lex
+LEX 	    = flex
 YACC	    = yacc
 YFLAGS      = -d
 
@@ -425,15 +446,15 @@
 
 .C.o: 
 	$(ECHO) "Compiling " $< " --> " $*.o " ..."; \
-	$(CCPP) $(CPPFLAGS) -c $< /Fo../WIN32/$@
+	$(CCPP) $(CPPFLAGS) -c $< -o ../LINUXAMD64/$@
 
 .c.o:
 	$(ECHO) "Compiling " $< " --> " $*.o " ..."; \
-	$(CC) $(CFLAGS) -c $< /Fo../WIN32/$@
+	$(CC) $(CFLAGS) -c $< -o ../LINUXAMD64/$@
 
 .cu.o:
 	$(ECHO) "Compiling " $< " --> " $*.o " ..."; \
-	$(NVCC) $(NVCCFLAGS) -c $< /Fo../WIN32/$@
+	$(NVCC) $(NVCCFLAGS) -c $< -o ../LINUXAMD64/$@
 
 .y.o:
 
@@ -442,83 +463,83 @@
 ########## Targets
 
 ### Source targets
-all default:   vmd_WIN32
+all default:   vmd_LINUXAMD64
 
-vmd_WIN32: y.tab.h $(VMD_OBJS)
+vmd_LINUXAMD64: y.tab.h $(VMD_OBJS)
 	$(ECHO) "Linking " $@ "..."; \
-	$(CD) ../WIN32 ; \
-	if [ ! -r ./ ]; then \
-	  ln -s ../src/ ./ ; \
+	$(CD) ../LINUXAMD64 ; \
+	if [ ! -r ./foobar ]; then \
+	  ln -s ../src/foobar ./foobar ; \
 	fi; \
 	$(CCPP) $(CPPFLAGS) -I../src -o $@ $(VMD_OBJS) $(LOADLIBES) ; 
 	$(COMPILERC) $(RCFLAGS)
 
 install:
-	if [ ! -d "/usr/local/lib/vmd" ]; then \
-		$(MAKEDIR) "/usr/local/lib/vmd" ; \
+	if [ ! -d "$(RPDIR)/lib/vmd" ]; then \
+		$(MAKEDIR) "$(RPDIR)/lib/vmd" ; \
 	fi ; \
-	if [ ! -d "/usr/local/bin" ]; then \
-		$(MAKEDIR) "/usr/local/bin" ; \
+	if [ ! -d "$(RPDIR)/bin" ]; then \
+		$(MAKEDIR) "$(RPDIR)/bin" ; \
 	fi ; \
-	if [ ! -d "/usr/local/lib/vmd"/doc ]; then \
-		$(MAKEDIR) "/usr/local/lib/vmd"/doc; \
+	if [ ! -d "$(RPDIR)/doc" ]; then \
+		$(MAKEDIR) "$(RPDIR)/doc"; \
 	fi
-	-$(COPY) ../Announcement  "/usr/local/lib/vmd"
-	-$(COPY) ../README        "/usr/local/lib/vmd"
-	-$(COPY) ../LICENSE       "/usr/local/lib/vmd"
-	-$(COPY) ../doc/ug.pdf        "/usr/local/lib/vmd"/doc
-	if [ -f /usr/local/lib/vmd/vmd_WIN32 ]; then \
-           $(MOVE) "/usr/local/lib/vmd/vmd_WIN32" "/usr/local/lib/vmd/OLD_vmd_WIN32" ; $(DELETE) "/usr/local/lib/vmd/OLD_vmd_WIN32" ; fi
-	-$(COPY) ../WIN32/vmd_WIN32 "/usr/local/lib/vmd"
-	if [ -d "../lib/redistrib/lib_WIN32" ]; then \
-		$(CD) ../lib/redistrib/lib_WIN32; $(TAR) -cf - ./* | \
-		(cd "/usr/local/lib/vmd" ; $(TAR) -xf -) \
+	-$(COPY) ../Announcement  "$(RPDIR)/lib/vmd"
+	-$(COPY) ../README        "$(RPDIR)/lib/vmd"
+	-$(COPY) ../LICENSE       "$(RPDIR)/lib/vmd"
+	-$(COPY) ../doc/ug.pdf        "$(RPDIR)/lib/vmd"/doc
+	if [ -f $(RPDIR)/lib/vmd/vmd_LINUXAMD64 ]; then \
+           $(MOVE) "$(RPDIR)/lib/vmd/vmd_LINUXAMD64" "$(RPDIR)/lib/vmd/OLD_vmd_LINUXAMD64" ; $(DELETE) "$(RPDIR)/lib/vmd/OLD_vmd_LINUXAMD64" ; fi
+	-$(COPY) ../LINUXAMD64/vmd_LINUXAMD64 "$(RPDIR)/lib/vmd"
+	if [ -d "../lib/redistrib/lib_LINUXAMD64" ]; then \
+		$(CD) ../lib/redistrib/lib_LINUXAMD64; $(TAR) -cf - ./* | \
+		(cd "$(RPDIR)/lib/vmd" ; $(TAR) -xf -) \
 	fi ;
-	-$(COPY) ../lib/stride/stride_WIN32 ../lib/surf/surf_WIN32 ../lib/tachyon/tachyon_WIN32 "/usr/local/lib/vmd"
+	-$(COPY) ../lib/stride/stride_LINUXAMD64 ../lib/surf/surf_LINUXAMD64 ../lib/tachyon/tachyon_LINUXAMD64 "$(RPDIR)/lib/vmd"
 	-$(CD) ..; $(TAR) -cf - scripts | \
-	(cd "/usr/local/lib/vmd" ; $(TAR) -xf -)
+	(cd "$(RPDIR)/lib/vmd" ; $(TAR) -xf -)
 	-$(CD) ../lib; $(TAR) -cf - scripts | \
-	(cd "/usr/local/lib/vmd" ; $(TAR) -xf -)
+	(cd "$(RPDIR)/lib/vmd" ; $(TAR) -xf -)
 	-$(CD) ..; $(TAR) -cf - python | \
-	(cd "/usr/local/lib/vmd"/scripts ; $(TAR) -xf -)
+	(cd "$(RPDIR)/lib/vmd"/scripts ; $(TAR) -xf -)
 	-$(CD) ..; $(TAR) -cf - plugins | \
-	(cd "/usr/local/lib/vmd" ; $(TAR) -xf -)
+	(cd "$(RPDIR)/lib/vmd" ; $(TAR) -xf -)
 	-$(CD) ..; $(TAR) -cf - shaders | \
-	(cd "/usr/local/lib/vmd" ; $(TAR) -xf -)
-	-$(COPY) ../data/.vmdrc ../data/.vmdsensors ../data/vmd_completion.dat "/usr/local/lib/vmd"
+	(cd "$(RPDIR)/lib/vmd" ; $(TAR) -xf -)
+	-$(COPY) ../data/.vmdrc ../data/.vmdsensors ../data/vmd_completion.dat "$(RPDIR)/lib/vmd"
 	$(CD) ../bin ; \
 	if [ -f run_vmd_tmp ]; then $(DELETE) run_vmd_tmp; fi ; \
 	if [ ! -x "/bin/csh" ]; then \
 		$(ECHO) "Info: /bin/csh shell not found, installing Bourne shell startup script instead" ; \
 		$(ECHO) '#!/bin/sh' >> run_vmd_tmp ; \
-		$(ECHO) 'defaultvmddir="/usr/local/lib/vmd"' >> run_vmd_tmp ; \
+		$(ECHO) 'defaultvmddir="$(RPDIR)/lib/vmd"' >> run_vmd_tmp ; \
 		$(ECHO) 'vmdbasename=vmd' >> run_vmd_tmp ; \
 		cat vmd.sh >> run_vmd_tmp ; \
 	else \
 		$(ECHO) '#!/bin/csh' >> run_vmd_tmp ; \
-		$(ECHO) 'set defaultvmddir="/usr/local/lib/vmd"' >> run_vmd_tmp ; \
+		$(ECHO) 'set defaultvmddir="$(RPDIR)/lib/vmd"' >> run_vmd_tmp ; \
 		$(ECHO) 'set vmdbasename=vmd' >> run_vmd_tmp ; \
 		cat vmd.csh >> run_vmd_tmp ; \
 	fi ; \
 	chmod +x run_vmd_tmp ; \
-	$(COPY) run_vmd_tmp "/usr/local/bin"/vmd ; \
+	$(COPY) run_vmd_tmp $(RPDIR)/bin ; \
 	$(DELETE) run_vmd_tmp
-	$(ECHO) Make sure "/usr/local/bin"/vmd is in your path.
+	$(ECHO) Make sure $(RPDIR)/bin is in your path.
 	$(ECHO) "VMD installation complete.  Enjoy!"
 
 ##### remove most of the cruft
 clean:
-	$(CD) ../WIN32 ; \
+	$(CD) ../LINUXAMD64 ; \
 		$(DELETE) *.o *.warnings *.depend.old core
 
 veryclean: clean
-	$(CD) ../WIN32 ; \
-	  $(DELETEDIR) ; \
-	  $(DELETE) vmd_WIN32
+	$(CD) ../LINUXAMD64 ; \
+	  $(DELETEDIR) foobar; \
+	  $(DELETE) vmd_LINUXAMD64
 	$(CD) ../src ; \
 	  $(DELETE) *.o *.a *~ core; \
-	  $(DELETEDIR) ; \
-	  $(DELETE) vmd_WIN32
+	  $(DELETEDIR) foobar; \
+	  $(DELETE) vmd_LINUXAMD64
 	$(CD) ../doc ; \
 	  $(DELETE) *~ core
 
@@ -551,7 +572,7 @@
 	done; \
 	$(ECHO) ParseTree.o AtomLexer.o AtomParser.o: y.tab.h \
                 >> $(DEPENDFILE); \
-	$(COPY) $(DEPENDFILE) $(DEPENDFILE).WIN32 ; \
+	$(COPY) $(DEPENDFILE) $(DEPENDFILE).LINUXAMD64 ; \
 	else \
 	  $(ECHO) "Cannot find dependencies; your compiler does not support dependency checking."; \
         fi
diff -u -r ../orig/vmd-1.9.1/src/OpenGLDisplayDevice.C ./vmd-1.9.1/src/OpenGLDisplayDevice.C
--- ../orig/vmd-1.9.1/src/OpenGLDisplayDevice.C	2012-02-02 02:54:52.000000000 -0500
+++ ./vmd-1.9.1/src/OpenGLDisplayDevice.C	2013-12-27 15:11:45.000000000 -0500
@@ -601,7 +601,10 @@
     wmhints.decorations = 1; // 1 (true) window decorations enabled
   }
 
-  Atom wmproperty = XInternAtom(dpy, "_MOTIF_WM_HINTS", True);
+  wmhints.decorations = 0;	     // Don't turn on decorations (no wm)
+
+  // Intern the atom even if it doesn't exist (no wm).
+  Atom wmproperty = XInternAtom(dpy, "_MOTIF_WM_HINTS", False);
   XChangeProperty(dpy, win, wmproperty, wmproperty, 32, 
                   PropModeReplace, (unsigned char *) &wmhints, 5);
 
@@ -824,7 +827,7 @@
     return (Window)0;
   }
 
-  Atom wmDeleteWindow = XInternAtom(glxsrv.dpy, "WM_DELETE_WINDOW", False);
+  Atom wmDeleteWindow = XInternAtom(glxsrv.dpy, "WM_DELETE_WINDOW", True);
 
   // (5) create an OpenGL rendering context
   if(!(glxsrv.cx = glXCreateContext(glxsrv.dpy, vi, None, GL_TRUE))) {
diff -u -r ../orig/vmd-1.9.1/src/TclTextInterp.C ./vmd-1.9.1/src/TclTextInterp.C
--- ../orig/vmd-1.9.1/src/TclTextInterp.C	2012-02-02 02:54:55.000000000 -0500
+++ ./vmd-1.9.1/src/TclTextInterp.C	2013-12-23 16:32:12.000000000 -0500
@@ -340,7 +340,7 @@
   gotPartial = 0;
 
   callLevel++;
-  Tcl_RecordAndEvalObj(interp, commandPtr, 0);
+  Tcl_EvalObjEx(interp, commandPtr, 0);
   callLevel--;
 
 #if TCL_MINOR_VERSION >= 4
@@ -376,7 +376,7 @@
 }
 
 int TclTextInterp::evalString(const char *s) {
-  if (Tcl_RecordAndEval(interp, s, 0) != TCL_OK) {
+  if (Tcl_Eval(interp, s) != TCL_OK) {
     // Don't print error message if there's nothing to show.
     if (strlen(Tcl_GetStringResult(interp))) 
       msgErr << Tcl_GetStringResult(interp) << sendmsg;
@@ -431,7 +431,7 @@
     // check if "exit" was called
     if (app->exitFlag) break;
 
-    Tcl_RecordAndEvalObj(interp, cmdPtr, 0);
+    Tcl_EvalObjEx(interp, cmdPtr, 0);
 
 #if TCL_MINOR_VERSION >= 4
     Tcl_DecrRefCount(cmdPtr);
diff -u -r ../orig/vmd-1.9.1/src/config.h ./vmd-1.9.1/src/config.h
--- ../orig/vmd-1.9.1/src/config.h	2012-02-02 02:54:58.000000000 -0500
+++ ./vmd-1.9.1/src/config.h	2013-12-23 16:32:12.000000000 -0500
@@ -1,10 +1,10 @@
 #ifndef CONFIG_OPTIONS_H
 #define CONFIG_OPTIONS_H
 #define VMDVERSION "1.9.1"
-#define VERSION_MSG "VMD for WIN32, version 1.9.1 (February 1, 2012)"
+#define VERSION_MSG "VMD for LINUXAMD64, version 1.9.1 (December 20, 2013)"
 /* You should not change this value */
 #define CMDLEN 15
-#define DEF_VMDIMAGEVIEWER "explorer %s"
+#define DEF_VMDIMAGEVIEWER "display %s"
 #define DEF_VMDENVVAR "/usr/local/lib/vmd"
 #define INIT_DEFDISPLAY DISPLAY_WIN
 #define INIT_DEFTITLE TITLE_ON
@@ -15,10 +15,10 @@
 #define VMD_AUTHORS_LINE2 "J. Gullingsrud, D. Hardy, W. Humphrey, B. Isralewitz, S. Izrailev, "
 #define VMD_AUTHORS_LINE3 "A. Kohlmeyer, D. Norris, J. Saam, J. Stone, J. Ulrich"
 #define VMD_AUTHORS_LINE4 ""
-#define VMD_STARTUP "vmd.rc"
-#define PYVMD_STARTUP "pyvmd.rc"
-#define VMD_ARCH "WIN32"
-#define VMD_OPTIONS "WIN32 TCL MSVC"
+#define VMD_STARTUP ".vmdrc"
+#define PYVMD_STARTUP ".pyvmdrc"
+#define VMD_ARCH "LINUXAMD64"
+#define VMD_OPTIONS "LINUXAMD64 OPENGL TK IMD XINPUT TCL PTHREADS"
 #define VMD_HOMEPAGE "http://www.ks.uiuc.edu/Research/vmd/"
 #define VMD_HELPPAGE "http://www.ks.uiuc.edu/Research/vmd/"
 #define VMD_CMD_PROMPT "vmd > "
