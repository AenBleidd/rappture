# Commands covered: Rappture::library
#
# This file contains a collection of tests for one of the Rappture Tcl
# commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# ======================================================================
# AUTHOR:  Derrick Kearney, Purdue University
# Copyright (c) 2004-2006  Purdue Research Foundation
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.


if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    package require Rappture
    namespace import -force ::tcltest::*
}
catch {unset lib}
set lib [Rappture::library rplib_test.xml]

#----------------------------------------------------------
# element command
# element "?-as <fval>? ?<path>?"
#     <fval> can be component, id, type, path, object
#----------------------------------------------------------
test library-5.0.1 {element command 0 arg} {
    $lib element
} {}
test library-5.1.1 {element command path as default 1 arg} {
    $lib element "input"
} {input}
test library-5.1.2 {element command path w/ id as default 1 arg} {
    $lib element "input.number(min)"
} {number(min)}
test library-5.1.3 {element command non-existant path 1 arg} {
    $lib element "kdsf.werw(we12)"
} {}
test library-5.2.1 {element command path 2 arg} {
    list [catch {$lib element "input.number(min)" "wreew"} msg] $msg
} {1 {wrong # args: should be "element ?-as fval? ?path?"}}
# this test works for old tcl bindings, different error message
#test library-5.3.1.1 {element command path -as flag  no option} {
#    list [catch {$lib element -as} msg] $msg
#} {1 {bad path component "-as"}}
# this test works for new tcl bindings, different error message
test library-5.3.1.2 {element command path -as flag  no option} {
    list [catch {$lib element -as} msg] $msg
} {1 {bad flavor "" for -as: should be component, id, object, path, type}}
test library-5.3.2 {element command path -as component, path with id} {
    $lib element -as component "input.number(max)"
} {number(max)}
test library-5.3.3 {element command path -as id, path with id} {
    $lib element -as id "input.number(max)"
} {max}
test library-5.3.4 {element command path -as type, path with id} {
    $lib element -as type "input.number(max)"
} {number}
test library-5.3.5 {element command path -as path, path with id} {
    $lib element -as path "input.number(max)"
} {input.number(max)}
test library-5.3.6 {element command path -as object, path with id} {
    set ele [$lib element -as object "input.number(max)"]
    list [catch {$ele isa ::Rappture::LibraryObj} msg] $msg
} {0 1}
# this test works for old tcl bindings, different error message
#test library-5.3.7.1 {element command path -as junk, path with id} {
#    list [catch {$lib element -as junk "input.number(max)"} msg] $msg
#} {1 {bad flavor "junk": should be component, id, object, path, type}}
# this test works for new tcl bindings, different error message
test library-5.3.7.2 {element command path -as junk, path with id} {
    list [catch {$lib element -as junk "input.number(max)"} msg] $msg
} {1 {bad flavor "junk" for -as: should be component, id, object, path, type}}
test library-5.3.8 {element command path -as component, path does not exist} {
    $lib element -as component "input.test(we)"
} {}
test library-5.3.9 {element command path -as id, path does not exist} {
    $lib element -as id "input.test(we)"
} {}
test library-5.3.10 {element command path -as type, path does not exist} {
    $lib element -as type "input.test(we)"
} {}
test library-5.3.11 {element command path -as path, path does not exist} {
    $lib element -as path "input.test(we)"
} {}
test library-5.3.12 {element command path -as object, path does not exist} {
    $lib element -as object "input.test(we)"
} {}
test library-5.4.1 {element command path -junk path} {
    list [catch {$lib element -junk "input"} msg] $msg
} {1 {bad option "-junk": should be -as}}

::tcltest::cleanupTests
return
