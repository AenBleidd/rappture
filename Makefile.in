
# ------------------------------------------------------------------------
# 	Makefile for Rappture 
# ------------------------------------------------------------------------

# ------------------------------------------------------------------------
# 	C Compiler options 
# ------------------------------------------------------------------------

RAPPTURE_MAJOR_VERSION =	@RAPPTURE_MAJOR_VERSION@
RAPPTURE_MINOR_VERSION =	@RAPPTURE_MINOR_VERSION@
RAPPTURE_RELEASE_SERIAL =	@RAPPTURE_RELEASE_SERIAL@
X_INCLUDES =		@X_INCLUDES@
X_LIBRARIES =		@X_LIBRARIES@
WORDSIZE =		@WORDSIZE@
version = $(RAPPTURE_MAJOR_VERSION).$(RAPPTURE_MINOR_VERSION).$(RAPPTURE_RELEASE_SERIAL)

# ------------------------------------------------------------------------
# 	Source and targer installation directories 
# ------------------------------------------------------------------------

bindir =		$(exec_prefix)/bin
datadir =		@datadir@
datarootdir =		@datarootdir@
exec_prefix =		@exec_prefix@
incdir =		$(prefix)/include
includedir =		@includedir@
libdir =		@libdir@
prefix =		@prefix@
scriptdir =		$(exec_prefix)/scripts
pkgdir =		$(exec_prefix)/lib
srcdir =		$(shell cd @srcdir@; pwd)
runtime =		$(shell cd ../runtime; pwd)
statsdir =		@STATSDIR@

# ------------------------------------------------------------------------
# 	You don't need to edit anything beyond this point
# ------------------------------------------------------------------------

INSTALL =		@INSTALL@
INSTALL_DATA =		@INSTALL_DATA@
DESTDIR =  
RANLIB =		@RANLIB@
MAKE =			make
SHELL =			/bin/sh
AR =			ar rc
RM =			rm -f
LN_S =			@LN_S@
VPATH =			$(srcdir)
MKDIR_P =		@MKDIR_P@
CP = 			/bin/cp

common_flags =		--prefix=$(prefix) --exec_prefix=$(exec_prefix) 
ifneq ($(X_INCLUDES), )
common_flags += --x-includes=$(X_INCLUDES)
endif
ifneq ($(X_LIBRARIES), )
common_flags += --x-includes=$(X_LIBRARIES)
endif

PATH := $(bindir):$(PATH)

targets = \
	blt builder cmake examples expat expect glew gui htmlwidget \
	itcl itk lang lib nanovis optimizer osg osgearth pymol \
	pymolproxy shape sqlitetcl tcl tcllib tdom tester tk \
	tkimg tls video voronoi vtk vtkvis zlib  

.PHONY: $(targets)

all: lib

libshell: $(tcllib)/timestamp $(tls)/timestamp $(itcl)/timestamp 

# Aliases for package directory names.

blt=blt2.4z
builder=builder
cmake=cmake-2.8.12
examples=examples
expat = expat-2.0.1
expect=expect5.45
glew=glew
gui=gui
htmlwidget=htmlwidget-3a14
itcl=itcl3.3
itk=itk3.3
lang=lang
lib=lib
nanovis=nanovis
optimizer=optimizer
osg=OpenSceneGraph-3.2.0
osgearth=osgearth-2.5
pymol=pymol
pymolproxy=pymolproxy
shape=shape0.4/unix
sqlitetcl=sqlite-3071502/tea
tcl=tcl8.4.19/unix
tcllib=tcllib-1.12
tdom=tDOM-0.8.2
tester=tester
tk=tk8.4.19/unix
tkimg=tkimg1.3
tls=tls1.6
video=video
voronoi=voronoi
vtk=vtk-6.0.0
vtkvis=vtkvis
zlib=zlib

subdirs = \
	$(blt) $(builder) $(cmake) $(examples) $(expat) $(expect) $(glew) \
	$(gui) $(htmlwidget) $(itcl) $(itk) $(lang) $(lib) $(nanovis) \
	$(optimizer) $(osg) $(osgearth) $(pymol) $(pymolproxy) $(shape) \
	$(sqlitetcl) $(tcl) $(tcllib) $(tdom) $(tester) $(tk) $(tkimg) \
	$(tls) $(video) $(voronoi) $(vtk) $(vtkvis) $(zlib) 


clean:
	$(RM) -r $(subdirs)

# -------------------------------------------------------------------------
#  BLT
# -------------------------------------------------------------------------

blt_flags =	\
	--enable-shared \
	$(common_flags)

blt: $(blt)/timestamp

clean-blt: 
	$(clean_blt)
configure-blt: 
	$(configure_blt)
build-blt: 
	$(build_blt)
install-blt: 
	$(install_blt)
touch-blt: 
	$(touch_blt)
force-blt: $(tcl)/timestamp $(tk)/timestamp
	+ $(clean_blt)
	+ $(configure_blt)
	+ $(build_blt)
	+ $(install_blt)
	+ $(touch_blt)

define clean_blt
	$(RM) -r $(blt)
endef
define configure_blt
	$(MKDIR_P) $(blt)
	cd $(blt); $(runtime)/$(blt)/configure $(blt_flags) 
endef
define build_blt
	$(MAKE)  -C $(blt) all
endef
define install_blt
	$(MAKE) -C $(blt) install
endef
define touch_blt
	touch $(blt)/timestamp
endef

$(blt)/timestamp: $(tcl)/timestamp $(tk)/timestamp
	+ $(clean_blt)
	+ $(configure_blt)
	+ $(build_blt)
	+ $(install_blt)
	+ $(touch_blt)

# -------------------------------------------------------------------------
#  BUILDER
# -------------------------------------------------------------------------

builder_flags =	\
	--with-tclsh="$(bindir)/tclsh8.4" \
	--enable-shared \
	$(common_flags)

builder: $(builder)/timestamp

clean-builder: 
	$(clean_builder)
configure-builder: 
build-builder: 
	$(build_builder)
install-builder: 
	$(install_builder)
touch-builder: 
	$(touch_builder)
force-builder: $(gui)/timestamp 
	+ $(clean_builder)
	+ $(configure_builder)
	+ $(build_builder)
	+ $(install_builder)
	+ $(touch_builder)

define clean_builder
	$(MAKE) -C $(builder) clean
endef
define build_builder
	$(MAKE) -C $(builder) all
endef
define install_builder
	$(MAKE) -C $(builder) install
endef
define touch_builder
	touch $(builder)/timestamp
endef

$(builder)/timestamp: $(gui)/timestamp 
	+ $(clean_builder)
	+ $(configure_builder)
	+ $(build_builder)
	+ $(install_builder)
	+ $(touch_builder)

# -------------------------------------------------------------------------
#  CMAKE
# -------------------------------------------------------------------------

cmake_flags =	\
	--prefix=$(prefix)

cmake: $(cmake)/timestamp

clean-cmake: 
	$(clean_cmake)
configure-cmake: 
	$(configure_cmake)
build-cmake: 
	$(build_cmake)
install-cmake: 
	$(install_cmake)
touch-cmake: 
	$(touch_cmake)
force-cmake: 
	+ $(clean_cmake)
	+ $(configure_cmake)
	+ $(build_cmake)
	+ $(install_cmake)
	+ $(touch_cmake)

define clean_cmake
	$(RM) -r $(cmake)
endef
define configure_cmake
	$(MKDIR_P) $(cmake)
	cd $(cmake); $(runtime)/$(cmake)/configure $(cmake_flags) 
endef
define build_cmake
	$(MAKE)  -C $(cmake) all
endef
define install_cmake
	$(MAKE) -C $(cmake) install
endef
define touch_cmake
	touch $(cmake)/timestamp
endef

$(cmake)/timestamp: 
	+ $(clean_cmake)
	+ $(configure_cmake)
	+ $(build_cmake)
	+ $(install_cmake)
	+ $(touch_cmake)

# -------------------------------------------------------------------------
#  EXAMPLES
# -------------------------------------------------------------------------

examples_flags =	\
	--with-tclsh="$(bindir)/tclsh8.4" \
	--enable-shared \
	$(common_flags)

examples: $(examples)/timestamp

clean-examples: 
	$(clean_examples)
configure-examples: 
	$(configure_examples)
build-examples: 
	$(build_examples)
install-examples: 
	$(install_examples)
touch-examples: 
	$(touch_examples)
force-examples: $(gui)/timestamp 
	+ $(clean_examples)
	+ $(configure_examples)
	+ $(build_examples)
	+ $(install_examples)
	+ $(touch_examples)

define clean_examples
	$(RM) -r $(examples)
endef
define configure_examples
	$(MKDIR_P) $(examples)
	cd $(examples); $(srcdir)/$(examples)/configure $(examples_flags) 
endef
define build_examples
	$(MAKE) -C $(examples) all
endef
define install_examples
	$(MAKE) -C $(examples) install
endef
define touch_examples
	touch $(examples)/timestamp
endef

$(examples)/timestamp: $(gui)/timestamp 
	+ $(clean_examples)
	+ $(configure_examples)
	+ $(build_examples)
	+ $(install_examples)
	+ $(touch_examples)

# -------------------------------------------------------------------------
#  EXPAT
# -------------------------------------------------------------------------

expat_flags =	\
	--enable-shared \
	$(common_flags)

expat: $(expat)/timestamp

clean-expat: 
	$(clean_expat)
configure-expat: 
	$(configure_expat)
build-expat: 
	$(build_expat)
install-expat: 
	$(install_expat)
touch-expat: 
	$(touch_expat)
force-expat: 
	+ $(clean_expat)
	+ $(configure_expat)
	+ $(build_expat)
	+ $(install_expat)
	+ $(touch_expat)

define clean_expat
	$(RM) -r $(expat)
endef
define configure_expat
	$(MKDIR_P) $(expat)
	cd $(expat); $(runtime)/$(expat)/configure $(expat_flags) 
endef
define build_expat
	$(MAKE)  -C $(expat) all
endef
define install_expat
	$(MAKE) -C $(expat) install
endef
define touch_expat
	touch $(expat)/timestamp
endef

$(expat)/timestamp: 
	+ $(clean_expat)
	+ $(configure_expat)
	+ $(build_expat)
	+ $(install_expat)
	+ $(touch_expat)

# -------------------------------------------------------------------------
#  EXPECT
# -------------------------------------------------------------------------

expect_flags =	\
	--enable-shared \
	--enable-64bit \
	--with-tcl=$(libdir) \
	--with-tclinclude=$(incdir) \
	$(common_flags)

expect: $(expect)/timestamp

clean-expect: 
	$(clean_expect)
configure-expect: 
	$(configure_expect)
build-expect: 
	$(build_expect)
install-expect: 
	$(install_expect)
touch-expect: 
	$(touch_expect)
force-expect: $(tcl)/timestamp $(tk)/timestamp
	+ $(clean_expect)
	+ $(configure_expect)
	+ $(build_expect)
	+ $(install_expect)
	+ $(touch_expect)

define clean_expect
	$(RM) -r $(expect)
endef
define configure_expect
	$(MKDIR_P) $(expect)
	cd $(expect); $(runtime)/$(expect)/configure $(expect_flags) 
endef
define build_expect
	$(MAKE)  -C $(expect) all
endef
define install_expect
	$(MAKE) -C $(expect) install
endef
define touch_expect
	touch $(expect)/timestamp
endef

$(expect)/timestamp: $(tcl)/timestamp $(tk)/timestamp
	+ $(clean_expect)
	+ $(configure_expect)
	+ $(build_expect)
	+ $(install_expect)
	+ $(touch_expect)

# -------------------------------------------------------------------------
#  GLEW
# -------------------------------------------------------------------------

glew_flags =	\
	--enable-shared \
	$(common_flags)

glew: $(glew)/timestamp

clean-glew: 
	$(clean_glew)
configure-glew: 
	$(configure_glew)
build-glew: 
	$(build_glew)
install-glew: 
	$(install_glew)
touch-glew: 
	$(touch_glew)
force-glew: 
	+ $(clean_glew)
	+ $(configure_glew)
	+ $(build_glew)
	+ $(install_glew)
	+ $(touch_glew)

define clean_glew
	$(RM) -r $(glew)
endef
define configure_glew
	$(MKDIR_P) $(glew)
	cd $(glew); $(runtime)/$(glew)/configure $(glew_flags) 
endef
define build_glew
	$(MAKE)  -C $(glew) all
endef
define install_glew
	$(MAKE) -C $(glew) install
endef
define touch_glew
	touch $(glew)/timestamp
endef

$(glew)/timestamp: 
	+ $(clean_glew)
	+ $(configure_glew)
	+ $(build_glew)
	+ $(install_glew)
	+ $(touch_glew)

# -------------------------------------------------------------------------
#  GUI
# -------------------------------------------------------------------------

gui: $(gui)/timestamp

gui_flags =	\
	--with-tclsh="$(bindir)/tclsh8.4" \
	--enable-shared \
	$(common_flags)

gui: $(gui)/timestamp

clean-gui: 
	$(clean_gui)
configure-gui: 
	$(configure_gui)
build-gui: 
	$(build_gui)
install-gui: 
	$(install_gui)
touch-gui: 
	$(touch_gui)
force-gui: $(lib)/timestamp \
		  $(blt)/timestamp \
		  $(itk)/timestamp \
		  $(htmlwidget)/timestamp \
		  $(shape)/timestamp \
		  $(sqlitetcl)/timestamp \
		  $(vtk)/timestamp 
	+ $(clean_gui)
	+ $(configure_gui)
	+ $(build_gui)
	+ $(install_gui)
	+ $(touch_gui)

define clean_gui
	$(RM) -r $(gui)
endef
define configure_gui
	$(MKDIR_P) $(gui)
	cd $(gui); $(srcdir)/$(gui)/configure $(gui_flags) 
endef
define build_gui
	$(MAKE) -C $(gui) all
endef
define install_gui
	$(MAKE) -C $(gui) install
endef
define touch_gui
	touch $(gui)/timestamp
endef

$(gui)/timestamp: $(lib)/timestamp \
		  $(blt)/timestamp \
		  $(itk)/timestamp \
		  $(htmlwidget)/timestamp \
		  $(shape)/timestamp \
		  $(sqlitetcl)/timestamp \
		  $(vtk)/timestamp 
	+ $(clean_gui)
	+ $(configure_gui)
	+ $(build_gui)
	+ $(install_gui)
	+ $(touch_gui)

# -------------------------------------------------------------------------
#  HTMLWIDGET
# -------------------------------------------------------------------------

htmlwidget_flags = \
	--enable-shared \
	$(common_flags)

htmlwidget: $(htmlwidget)/timestamp

clean-htmlwidget: 
	$(clean_htmlwidget)
configure-htmlwidget: 
	$(configure_htmlwidget)
build-htmlwidget: 
	$(build_htmlwidget)
install-htmlwidget: 
	$(install_htmlwidget)
touch-htmlwidget: 
	$(touch_htmlwidget)
force-htmlwidget: $(tk)/timestamp
	+ $(clean_htmlwidget)
	+ $(configure_htmlwidget)
	+ $(build_htmlwidget)
	+ $(install_htmlwidget)
	+ $(touch_htmlwidget)

define clean_htmlwidget
	$(RM) -r $(htmlwidget)
endef
define configure_htmlwidget
	$(MKDIR_P) $(htmlwidget)
	cd $(htmlwidget); $(runtime)/$(htmlwidget)/configure $(htmlwidget_flags) 
endef
define build_htmlwidget
	$(MAKE) -C $(htmlwidget) all
endef
define install_htmlwidget
	$(MAKE) -C $(htmlwidget) install
endef
define touch_htmlwidget
	touch $(htmlwidget)/timestamp
endef

$(htmlwidget)/timestamp: $(tk)/timestamp
	+ $(clean_htmlwidget)
	+ $(configure_htmlwidget)
	+ $(build_htmlwidget)
	+ $(install_htmlwidget)
	+ $(touch_htmlwidget)

# -------------------------------------------------------------------------
#  ITCL
# -------------------------------------------------------------------------

itcl_flags =	\
	--enable-shared \
	$(common_flags)

itcl: $(itcl)/timestamp

clean-itcl: 
	$(clean_itcl)
configure-itcl: 
	$(configure_itcl)
build-itcl: 
	$(build_itcl)
install-itcl: 
	$(install_itcl)
touch-itcl: 
	$(touch_itcl)
force-itcl: 
	+ $(clean_itcl)
	+ $(configure_itcl)
	+ $(build_itcl)
	+ $(install_itcl)
	+ $(touch_itcl)

define clean_itcl
	$(RM) -r $(itcl)
endef
define configure_itcl
	$(MKDIR_P) $(itcl)
	cd $(itcl); $(runtime)/$(itcl)/configure $(itcl_flags) 
endef
define build_itcl
	$(MAKE)  -C $(itcl) all
endef
define install_itcl
	$(MAKE) -C $(itcl) install
endef
define touch_itcl
	touch $(itcl)/timestamp
endef

$(itcl)/timestamp: $(tcl)/timestamp
	+ $(clean_itcl)
	+ $(configure_itcl)
	+ $(build_itcl)
	+ $(install_itcl)
	+ $(touch_itcl)

# -------------------------------------------------------------------------
#  ITK
# -------------------------------------------------------------------------

itk_flags =	\
	--enable-shared \
	$(common_flags)

itk: $(itk)/timestamp

clean-itk: 
	$(clean_itk)
configure-itk: 
	$(configure_itk)
build-itk: 
	$(build_itk)
install-itk: 
	$(install_itk)
touch-itk: 
	$(touch_itk)
force-itk: $(itcl)/timestamp $(tk)/timestamp
	+ $(clean_itk)
	+ $(configure_itk)
	+ $(build_itk)
	+ $(install_itk)
	+ $(touch_itk)

define clean_itk
	$(RM) -r $(itk)
endef
define configure_itk
	$(MKDIR_P) $(itk)
	cd $(itk); $(runtime)/$(itk)/configure $(itk_flags) 
endef
define build_itk
	$(MAKE) -C $(itk) all
endef
define install_itk
	$(MAKE) -C $(itk) install
endef
define touch_itk
	touch $(itk)/timestamp
endef

$(itk)/timestamp: $(itcl)/timestamp $(tk)/timestamp
	+ $(clean_itk)
	+ $(configure_itk)
	+ $(build_itk)
	+ $(install_itk)
	+ $(touch_itk)

# -------------------------------------------------------------------------
#  LANG
# -------------------------------------------------------------------------

lang_flags =	\
	--with-tclsh="$(bindir)/tclsh8.4" \
	--enable-shared \
	$(common_flags)

lang: $(lang)/timestamp

clean-lang: 
	$(clean_lang)
configure-lang: 
	$(configure_lang)
build-lang: 
	$(build_lang)
install-lang: 
	$(install_lang)
touch-lang: 
	$(touch_lang)
force-lang: $(gui)/timestamp 
	+ $(clean_lang)
	+ $(configure_lang)
	+ $(build_lang)
	+ $(install_lang)
	+ $(touch_lang)

define clean_lang
	$(RM) -r $(lang)
endef
define configure_lang
	$(MKDIR_P) $(lang)
	cd $(lang); $(srcdir)/$(lang)/configure $(lang_flags) 
endef
define build_lang
	$(MAKE) -C $(lang) all
endef
define install_lang
	$(MAKE) -C $(lang) install
endef
define touch_lang
	touch $(lang)/timestamp
endef

$(lang)/timestamp: $(gui)/timestamp 
	+ $(clean_lang)
	+ $(configure_lang)
	+ $(build_lang)
	+ $(install_lang)
	+ $(touch_lang)


# -------------------------------------------------------------------------
#  LIB
# -------------------------------------------------------------------------

lib_flags =	\
	--with-expatincdir=$(incdir) \
	--with-expatlibdir=$(libdir) \
	--enable-shared \
	$(common_flags)

lib: $(lib)/timestamp

clean-lib: 
	$(clean_lib)
configure-lib: 
	$(configure_lib)
build-lib: 
	$(build_lib)
install-lib: 
	$(install_lib)
touch-lib: 
	$(touch_lib)
force-lib: $(expat)/timestamp $(zlib)/timestamp
	+ $(clean_lib)
	+ $(configure_lib)
	+ $(build_lib)
	+ $(install_lib)
	+ $(touch_lib)

define clean_lib
	$(RM) -r $(lib)
endef
define configure_lib
	$(MKDIR_P) $(lib)
	cd $(lib); $(srcdir)/src/configure $(lib_flags) 
endef
define build_lib
	$(MAKE)  -C $(lib) all
endef
define install_lib
	$(MAKE) -C $(lib) install
endef
define touch_lib
	touch $(lib)/timestamp
endef

$(lib)/timestamp: $(expat)/timestamp $(zlib)/timestamp
	+ $(clean_lib)
	+ $(configure_lib)
	+ $(build_lib)
	+ $(install_lib)
	+ $(touch_lib)

# -------------------------------------------------------------------------
#  NANOVIS
# -------------------------------------------------------------------------

nanovis_flags =	\
	--with-tcllib=$(libdir) \
	--with-rappture=$(exec_prefix) \
	--with-vtk-includes=$(incdir) \
	--with-vtk-libs=$(libdir) \
	--with-statsdir=$(statsdir) \
	$(common_flags)

nanovis: $(nanovis)/timestamp

clean-nanovis: 
	$(clean_nanovis)
configure-nanovis: 
	$(configure_nanovis)
build-nanovis: 
	$(build_nanovis)
install-nanovis: 
	$(install_nanovis)
touch-nanovis: 
	$(touch_nanovis)
force-nanovis: $(lib)/timestamp $(vtk)/timestamp 
	+ $(clean_nanovis)
	+ $(configure_nanovis)
	+ $(build_nanovis)
	+ $(install_nanovis)
	+ $(touch_nanovis)

define clean_nanovis
	$(RM) -r $(nanovis)
endef
define configure_nanovis
	$(MKDIR_P) $(nanovis)
	cd $(nanovis); $(srcdir)/packages/vizservers/$(nanovis)/configure $(nanovis_flags) 
endef
define build_nanovis
	$(MAKE) -C $(nanovis) all
endef
define install_nanovis
	$(MAKE) -C $(nanovis) install
endef
define touch_nanovis
	touch $(nanovis)/timestamp
endef

$(nanovis)/timestamp: $(lib)/timestamp $(vtk)/timestamp 
	+ $(clean_nanovis)
	+ $(configure_nanovis)
	+ $(build_nanovis)
	+ $(install_nanovis)
	+ $(touch_nanovis)

# -------------------------------------------------------------------------
#  OPTIMIZER
# -------------------------------------------------------------------------

optimizer_flags =	\
	--with-tclsh="$(bindir)/tclsh8.4" \
	--enable-shared \
	$(common_flags)

optimizer: $(optimizer)/timestamp

clean-optimizer: 
	$(clean_optimizer)
configure-optimizer: 
	$(configure_optimizer)
build-optimizer: 
	$(build_optimizer)
install-optimizer: 
	$(install_optimizer)
touch-optimizer: 
	$(touch_optimizer)
force-optimizer: $(gui)/timestamp 
	+ $(clean_optimizer)
	+ $(configure_optimizer)
	+ $(build_optimizer)
	+ $(install_optimizer)
	+ $(touch_optimizer)

define clean_optimizer
	$(RM) -r $(optimizer)
endef
define configure_optimizer
	$(MKDIR_P) $(optimizer)
	cd $(optimizer); $(srcdir)/$(optimizer)/configure $(optimizer_flags) 
endef
define build_optimizer
	$(MAKE) -C $(optimizer) all
endef
define install_optimizer
	$(MAKE) -C $(optimizer) install
endef
define touch_optimizer
	touch $(optimizer)/timestamp
endef

$(optimizer)/timestamp: $(gui)/timestamp 
	+ $(clean_optimizer)
	+ $(configure_optimizer)
	+ $(build_optimizer)
	+ $(install_optimizer)
	+ $(touch_optimizer)

# -------------------------------------------------------------------------
#  OSG
# -------------------------------------------------------------------------

osg_flags =	\
	--with-tclsh="$(bindir)/tclsh8.4" \
	--enable-shared \
	$(common_flags)

osg: $(osg)/timestamp

clean-osg: 
	$(clean_osg)
configure-osg: 
	$(configure_osg)
build-osg: 
	$(build_osg)
install-osg: 
	$(install_osg)
touch-osg: 
	$(touch_osg)
force-osg: $(gui)/timestamp 
	+ $(clean_osg)
	+ $(configure_osg)
	+ $(build_osg)
	+ $(install_osg)
	+ $(touch_osg)

define clean_osg
	$(RM) -r $(osg)
endef
define configure_osg
	$(MKDIR_P) $(osg)
	cd $(osg); $(srcdir)/$(osg)/configure $(osg_flags) 
endef
define build_osg
	$(MAKE) -C $(osg) all
endef
define install_osg
	$(MAKE) -C $(osg) install
endef
define touch_osg
	touch $(osg)/timestamp
endef

$(osg)/timestamp: $(gui)/timestamp 
	+ $(clean_osg)
	+ $(configure_osg)
	+ $(build_osg)
	+ $(install_osg)
	+ $(touch_osg)

# -------------------------------------------------------------------------
#  OSGEARTH
# -------------------------------------------------------------------------

osgearth_flags =	\
	--with-tclsh="$(bindir)/tclsh8.4" \
	--enable-shared \
	$(common_flags)

osgearth: $(osgearth)/timestamp

clean-osgearth: 
	$(clean_osgearth)
configure-osgearth: 
	$(configure_osgearth)
build-osgearth: 
	$(build_osgearth)
install-osgearth: 
	$(install_osgearth)
touch-osgearth: 
	$(touch_osgearth)
force-osgearth: $(gui)/timestamp 
	+ $(clean_osgearth)
	+ $(configure_osgearth)
	+ $(build_osgearth)
	+ $(install_osgearth)
	+ $(touch_osgearth)

define clean_osgearth
	$(RM) -r $(osgearth)
endef
define configure_osgearth
	$(MKDIR_P) $(osgearth)
	cd $(osgearth); $(srcdir)/$(osgearth)/configure $(osgearth_flags) 
endef
define build_osgearth
	$(MAKE) -C $(osgearth) all
endef
define install_osgearth
	$(MAKE) -C $(osgearth) install
endef
define touch_osgearth
	touch $(osgearth)/timestamp
endef

$(osgearth)/timestamp: $(gui)/timestamp 
	+ $(clean_osgearth)
	+ $(configure_osgearth)
	+ $(build_osgearth)
	+ $(install_osgearth)
	+ $(touch_osgearth)

# -------------------------------------------------------------------------
#  PYMOL
# -------------------------------------------------------------------------

pymol_flags =	\
	$(common_flags)

pymol: $(pymol)/timestamp

clean-pymol: 
	$(clean_pymol)
configure-pymol: 
	$(configure_pymol)
build-pymol: 
	$(build_pymol)
install-pymol: 
	$(install_pymol)
touch-pymol: 
	$(touch_pymol)
force-pymol: $(glew)/timestamp 
	+ $(clean_pymol)
	+ $(configure_pymol)
	+ $(build_pymol)
	+ $(install_pymol)
	+ $(touch_pymol)

define clean_pymol
	$(RM) -r $(pymol)
endef
define configure_pymol
	$(MKDIR_P) $(pymol)
	cd $(pymol); $(srcdir)/$(pymol)/configure $(pymol_flags) 
endef
define build_pymol
	$(MAKE) -C $(pymol) all
endef
define install_pymol
	$(MAKE) -C $(pymol) install
endef
define touch_pymol
	touch $(pymol)/timestamp
endef

$(pymol)/timestamp: $(glew)/timestamp 
	+ $(clean_pymol)
	+ $(configure_pymol)
	+ $(build_pymol)
	+ $(install_pymol)
	+ $(touch_pymol)


# -------------------------------------------------------------------------
#  PYMOLPROXY
# -------------------------------------------------------------------------

pymolproxy_flags =	\
	--with-tcllib=$(libdir) \
	--with-statsdir=$(statsdir) \
	$(common_flags)

pymolproxy: $(pymolproxy)/timestamp

clean-pymolproxy: 
	$(clean_pymolproxy)
configure-pymolproxy: 
	$(configure_pymolproxy)
build-pymolproxy: 
	$(build_pymolproxy)
install-pymolproxy: 
	$(install_pymolproxy)
touch-pymolproxy: 
	$(touch_pymolproxy)
force-pymolproxy: $(pymol)/timestamp 
	+ $(clean_pymolproxy)
	+ $(configure_pymolproxy)
	+ $(build_pymolproxy)
	+ $(install_pymolproxy)
	+ $(touch_pymolproxy)

define clean_pymolproxy
	$(RM) -r $(pymolproxy)
endef
define configure_pymolproxy
	$(MKDIR_P) $(pymolproxy)
	cd $(pymolproxy); $(srcdir)/$(pymolproxy)/configure $(pymolproxy_flags) 
endef
define build_pymolproxy
	$(MAKE) -C $(pymolproxy) all
endef
define install_pymolproxy
	$(MAKE) -C $(pymolproxy) install
endef
define touch_pymolproxy
	touch $(pymolproxy)/timestamp
endef

$(pymolproxy)/timestamp: $(pymol)/timestamp 
	+ $(clean_pymolproxy)
	+ $(configure_pymolproxy)
	+ $(build_pymolproxy)
	+ $(install_pymolproxy)
	+ $(touch_pymolproxy)

# -------------------------------------------------------------------------
#  SHAPE
# -------------------------------------------------------------------------

shape_flags =	\
	--enable-shared \
	--with-tclconf=$(libdir) \
	--with-tkconf=$(libdir) \
	$(common_flags)

shape: $(shape)/timestamp

clean-shape: 
	$(clean_shape)
configure-shape: 
	$(configure_shape)
build-shape: 
	$(build_shape)
install-shape: 
	$(install_shape)
touch-shape: 
	$(touch_shape)
force-shape: $(tk)/timestamp
	+ $(clean_shape)
	+ $(configure_shape)
	+ $(build_shape)
	+ $(install_shape)
	+ $(touch_shape)

define clean_shape
	$(RM) -r $(shape)
endef
define configure_shape
	$(MKDIR_P) $(shape)
	cd $(shape); $(runtime)/$(shape)/configure $(shape_flags) 
endef
define build_shape
	$(MAKE) -C $(shape) all
endef
define install_shape
	$(MAKE) -C $(shape) install
endef
define touch_shape
	touch $(shape)/timestamp
endef

$(shape)/timestamp: $(tk)/timestamp
	+ $(clean_shape)
	+ $(configure_shape)
	+ $(build_shape)
	+ $(install_shape)
	+ $(touch_shape)

# -------------------------------------------------------------------------
#  SQLITETCL
# -------------------------------------------------------------------------

sqlitetcl_flags = \
	--enable-shared \
	$(common_flags)

sqlitetcl: $(sqlitetcl)/timestamp

clean-sqlitetcl: 
	$(clean_sqlitetcl)
configure-sqlitetcl: 
	$(configure_sqlitetcl)
build-sqlitetcl: 
	$(build_sqlitetcl)
install-sqlitetcl: 
	$(install_sqlitetcl)
touch-sqlitetcl: 
	$(touch_sqlitetcl)
force-sqlitetcl: $(tcl)/timestamp
	+ $(clean_sqlitetcl)
	+ $(configure_sqlitetcl)
	+ $(build_sqlitetcl)
	+ $(install_sqlitetcl)
	+ $(touch_sqlitetcl)

define clean_sqlitetcl
	$(RM) -r $(sqlitetcl)
endef
define configure_sqlitetcl
	$(MKDIR_P) $(sqlitetcl)
	cd $(sqlitetcl); $(runtime)/$(sqlitetcl)/configure $(sqlitetcl_flags) 
endef
define build_sqlitetcl
	$(MAKE) -C $(sqlitetcl) all
endef
define install_sqlitetcl
	$(MAKE) -C $(sqlitetcl) install
endef
define touch_sqlitetcl
	touch $(sqlitetcl)/timestamp
endef

$(sqlitetcl)/timestamp: $(tcl)/timestamp
	+ $(clean_sqlitetcl)
	+ $(configure_sqlitetcl)
	+ $(build_sqlitetcl)
	+ $(install_sqlitetcl)
	+ $(touch_sqlitetcl)

# -------------------------------------------------------------------------
#  TCL
# -------------------------------------------------------------------------

tcl_flags =	\
	--enable-shared \
	--disable-threads \
	$(common_flags)

tcl: $(tcl)/timestamp

clean-tcl: 
	$(clean_tcl)
configure-tcl: 
	$(configure_tcl)
build-tcl: 
	$(build_tcl)
install-tcl: 
	$(install_tcl)
touch-tcl: 
	$(touch_tcl)
force-tcl: 
	+ $(clean_tcl)
	+ $(configure_tcl)
	+ $(build_tcl)
	+ $(install_tcl)
	+ $(touch_tcl)

define clean_tcl
	$(RM) -r $(tcl)
endef
define configure_tcl
	$(MKDIR_P) $(tcl)
	cd $(tcl); $(runtime)/$(tcl)/configure $(tcl_flags) 
endef
define build_tcl
	$(MAKE)  -C $(tcl) all
endef
define install_tcl
	$(MAKE) -C $(tcl) install
endef
define touch_tcl
	touch $(tcl)/timestamp
endef

$(tcl)/timestamp: 
	+ $(clean_tcl)
	+ $(configure_tcl)
	+ $(build_tcl)
	+ $(install_tcl)
	+ $(touch_tcl)

# -------------------------------------------------------------------------
#  TCLLIB
# -------------------------------------------------------------------------

tcllib_flags =	\
	--enable-shared \
	$(common_flags)

tcllib: $(tcllib)/timestamp

clean-tcllib: 
	$(clean_tcllib)
configure-tcllib: 
	$(configure_tcllib)
build-tcllib: 
	$(build_tcllib)
install-tcllib: 
	$(install_tcllib)
touch-tcllib: 
	$(touch_tcllib)
force-tcllib: $(tcl)/timestamp
	+ $(clean_tcllib)
	+ $(configure_tcllib)
	+ $(build_tcllib)
	+ $(install_tcllib)
	+ $(touch_tcllib)

define clean_tcllib
	$(RM) -r $(tcllib)
endef
define configure_tcllib
	$(MKDIR_P) $(tcllib)
	cd $(tcllib); $(runtime)/$(tcllib)/configure $(tcllib_flags) 
endef
define build_tcllib
	$(MAKE) -C $(tcllib) all
endef
define install_tcllib
	$(MAKE) -C $(tcllib) install
endef
define touch_tcllib
	touch $(tcllib)/timestamp
endef

$(tcllib)/timestamp: $(tcl)/timestamp
	+ $(clean_tcllib)
	+ $(configure_tcllib)
	+ $(build_tcllib)
	+ $(install_tcllib)
	+ $(touch_tcllib)

# -------------------------------------------------------------------------
#  TDOM
# -------------------------------------------------------------------------

tdom_flags =	\
	--enable-shared \
	$(common_flags)

tdom: $(tdom)/timestamp

clean-tdom: 
	$(clean_tdom)
configure-tdom: 
	$(configure_tdom)
build-tdom: 
	$(build_tdom)
install-tdom: 
	$(install_tdom)
touch-tdom: 
	$(touch_tdom)
force-tdom: $(tcl)/timestamp
	+ $(clean_tdom)
	+ $(configure_tdom)
	+ $(build_tdom)
	+ $(install_tdom)
	+ $(touch_tdom)

define clean_tdom
	$(RM) -r $(tdom)
endef
define configure_tdom
	$(MKDIR_P) $(tdom)
	cd $(tdom); $(runtime)/$(tdom)/configure $(tdom_flags) 
endef
define build_tdom
	$(MAKE) -C $(tdom) all
endef
define install_tdom
	$(MAKE) -C $(tdom) install
endef
define touch_tdom
	touch $(tdom)/timestamp
endef

$(tdom)/timestamp: $(tcl)/timestamp
	+ $(clean_tdom)
	+ $(configure_tdom)
	+ $(build_tdom)
	+ $(install_tdom)
	+ $(touch_tdom)

# -------------------------------------------------------------------------
#  TESTER
# -------------------------------------------------------------------------

tester_flags =	\
	--with-tclsh="$(bindir)/tclsh8.4" \
	--enable-shared \
	$(common_flags)

tester: $(tester)/timestamp

clean-tester: 
	$(clean_tester)
configure-tester: 
	$(configure_tester)
build-tester: 
	$(build_tester)
install-tester: 
	$(install_tester)
touch-tester: 
	$(touch_tester)
force-tester: $(gui)/timestamp 
	+ $(clean_tester)
	+ $(configure_tester)
	+ $(build_tester)
	+ $(install_tester)
	+ $(touch_tester)

define clean_tester
	$(RM) -r $(tester)
endef
define configure_tester
	$(MKDIR_P) $(tester)
	cd $(tester); $(srcdir)/$(tester)/configure $(tester_flags) 
endef
define build_tester
	$(MAKE) -C $(tester) all
endef
define install_tester
	$(MAKE) -C $(tester) install
endef
define touch_tester
	touch $(tester)/timestamp
endef

$(tester)/timestamp: $(gui)/timestamp 
	+ $(clean_tester)
	+ $(configure_tester)
	+ $(build_tester)
	+ $(install_tester)
	+ $(touch_tester)

# -------------------------------------------------------------------------
#  TK
# -------------------------------------------------------------------------

tk_flags =	\
	--enable-shared \
	--disable-threads \
	$(common_flags)

tk: $(tk)/timestamp

clean-tk: 
	$(clean_tk)
configure-tk: 
	$(configure_tk)
build-tk: 
	$(build_tk)
install-tk: 
	$(install_tk)
touch-tk: 
	$(touch_tk)
force-tk: $(tcl)/timestamp
	+ $(clean_tk)
	+ $(configure_tk)
	+ $(build_tk)
	+ $(install_tk)
	+ $(touch_tk)

define clean_tk
	$(RM) -r $(tk)
endef
define configure_tk
	$(MKDIR_P) $(tk)
	cd $(tk); $(runtime)/$(tk)/configure $(tk_flags) 
endef
define build_tk
	$(MAKE)  -C $(tk) all
endef
define install_tk
	$(MAKE) -C $(tk) install
endef
define touch_tk
	touch $(tk)/timestamp
endef

$(tk)/timestamp: $(tcl)/timestamp
	+ $(clean_tk)
	+ $(configure_tk)
	+ $(build_tk)
	+ $(install_tk)
	+ $(touch_tk)

# -------------------------------------------------------------------------
#  TKING
# -------------------------------------------------------------------------

tkimg_flags =	\
	--enable-shared \
	$(common_flags)

tkimg: $(tkimg)/timestamp

clean-tkimg: 
	$(clean_tkimg)
configure-tkimg: 
	$(configure_tkimg)
build-tkimg: 
	$(build_tkimg)
install-tkimg: 
	$(install_tkimg)
touch-tkimg: 
	$(touch_tkimg)
force-tkimg: $(tk)/timestamp
	+ $(clean_tkimg)
	+ $(configure_tkimg)
	+ $(build_tkimg)
	+ $(install_tkimg)
	+ $(touch_tkimg)

define clean_tkimg
	$(RM) -r $(tkimg)
endef
define configure_tkimg
	$(MKDIR_P) $(tkimg)
	cd $(tkimg); $(runtime)/$(tkimg)/configure $(tkimg_flags) 
endef
define build_tkimg
	$(MAKE) -C $(tkimg) all
endef
define install_tkimg
	$(MAKE) -C $(tkimg) install
endef
define touch_tkimg
	touch $(tkimg)/timestamp
endef

$(tkimg)/timestamp: $(tk)/timestamp
	+ $(clean_tkimg)
	+ $(configure_tkimg)
	+ $(build_tkimg)
	+ $(install_tkimg)
	+ $(touch_tkimg)

# -------------------------------------------------------------------------
#  TLS
# -------------------------------------------------------------------------

tls_flags =	\
	--enable-shared \
	$(common_flags)

tls: $(tls)/timestamp

clean-tls: 
	$(clean_tls)
configure-tls: 
	$(configure_tls)
build-tls: 
	$(build_tls)
install-tls: 
	$(install_tls)
touch-tls: 
	$(touch_tls)
force-tls: $(tcl)/timestamp
	+ $(clean_tls)
	+ $(configure_tls)
	+ $(build_tls)
	+ $(install_tls)
	+ $(touch_tls)

define clean_tls
	$(RM) -r $(tls)
endef
define configure_tls
	$(MKDIR_P) $(tls)
	cd $(tls); $(runtime)/$(tls)/configure $(tls_flags) 
endef
define build_tls
	$(MAKE) -C $(tls) all
endef
define install_tls
	$(MAKE) -C $(tls) install
endef
define touch_tls
	touch $(tls)/timestamp
endef

$(tls)/timestamp: $(tcl)/timestamp
	+ $(clean_tls)
	+ $(configure_tls)
	+ $(build_tls)
	+ $(install_tls)
	+ $(touch_tls)

# -------------------------------------------------------------------------
#  VIDEO
# -------------------------------------------------------------------------

video_flags =	\
	--with-tclsh="$(bindir)/tclsh8.4" \
	--enable-shared \
	$(common_flags)

video: $(video)/timestamp

clean-video: 
	$(clean_video)
configure-video: 
	$(configure_video)
build-video: 
	$(build_video)
install-video: 
	$(install_video)
touch-video: 
	$(touch_video)
force-video: $(gui)/timestamp 
	+ $(clean_video)
	+ $(configure_video)
	+ $(build_video)
	+ $(install_video)
	+ $(touch_video)

define clean_video
	$(RM) -r $(video)
endef
define configure_video
	$(MKDIR_P) $(video)
	cd $(video); $(srcdir)/$(video)/configure $(video_flags) 
endef
define build_video
	$(MAKE) -C $(video) all
endef
define install_video
	$(MAKE) -C $(video) install
endef
define touch_video
	touch $(video)/timestamp
endef

$(video)/timestamp: $(gui)/timestamp 
	+ $(clean_video)
	+ $(configure_video)
	+ $(build_video)
	+ $(install_video)
	+ $(touch_video)


# -------------------------------------------------------------------------
#  VORONOI
# -------------------------------------------------------------------------

voronoi_flags =	\
	--enable-shared \
	$(common_flags)

voronoi: $(voronoi)/timestamp

clean-voronoi: 
	$(clean_voronoi)
configure-voronoi: 
	$(configure_voronoi)
build-voronoi: 
	$(build_voronoi)
install-voronoi: 
	$(install_voronoi)
touch-voronoi: 
	$(touch_voronoi)
force-voronoi: 
	+ $(clean_voronoi)
	+ $(configure_voronoi)
	+ $(build_voronoi)
	+ $(install_voronoi)
	+ $(touch_voronoi)

define clean_voronoi
	$(RM) -r $(voronoi)
endef
define configure_voronoi
	$(MKDIR_P) $(voronoi)
	cd $(voronoi); $(runtime)/$(voronoi)/configure $(voronoi_flags) 
endef
define build_voronoi
	$(MAKE)  -C $(voronoi) all
endef
define install_voronoi
	$(MAKE) -C $(voronoi) install
endef
define touch_voronoi
	touch $(voronoi)/timestamp
endef

$(voronoi)/timestamp: 
	+ $(clean_voronoi)
	+ $(configure_voronoi)
	+ $(build_voronoi)
	+ $(install_voronoi)
	+ $(touch_voronoi)

# -------------------------------------------------------------------------
#  VTK
# -------------------------------------------------------------------------

vtk_flags =	\
	$(common_flags)

vtk: $(vtk)/timestamp

clean-vtk: 
	$(clean_vtk)
configure-vtk: 
	$(configure_vtk)
build-vtk: 
	$(build_vtk)
install-vtk: 
	$(install_vtk)
touch-vtk: 
	$(touch_vtk)
force-vtk: $(cmake)/timestamp $(glew)/timestamp $(tk)/timestamp
	+ $(clean_vtk)
	+ $(configure_vtk)
	+ $(build_vtk)
	+ $(install_vtk)
	+ $(touch_vtk)

define clean_vtk
	$(RM) -r $(vtk)
endef
define configure_vtk
	$(MKDIR_P) $(vtk)
	cd $(vtk); $(runtime)/$(vtk)/configure $(vtk_flags) 
endef
define build_vtk
	$(MAKE)  -C $(vtk) all
endef
define install_vtk
	$(MAKE) -C $(vtk) install
endef
define touch_vtk
	touch $(vtk)/timestamp
endef

$(vtk)/timestamp: $(cmake)/timestamp $(glew)/timestamp $(tk)/timestamp
	+ $(clean_vtk)
	+ $(configure_vtk)
	+ $(build_vtk)
	+ $(install_vtk)
	+ $(touch_vtk)

# -------------------------------------------------------------------------
#  VTKVIS
# -------------------------------------------------------------------------

vtkvis_flags =	\
	--with-tcllib=$(libdir) \
	--with-rappture=$(libdir) \
	--with-vtk-includes=$(incdir) \
	--with-vtk-libs=$(libdir) \
	--with-statsdir=$(statsdir) \
	$(common_flags)

vtkvis: $(vtkvis)/timestamp

clean-vtkvis: 
	$(clean_vtkvis)
configure-vtkvis: 
	$(configure_vtkvis)
build-vtkvis: 
	$(build_vtkvis)
install-vtkvis: 
	$(install_vtkvis)
touch-vtkvis: 
	$(touch_vtkvis)
force-vtkvis: $(vtk)/timestamp 
	+ $(clean_vtkvis)
	+ $(configure_vtkvis)
	+ $(build_vtkvis)
	+ $(install_vtkvis)
	+ $(touch_vtkvis)

define clean_vtkvis
	$(RM) -r $(vtkvis)
endef
define configure_vtkvis
	$(MKDIR_P) $(vtkvis)
	cd $(vtkvis); $(srcdir)/packages/vizservers/$(vtkvis)/configure $(vtkvis_flags) 
endef
define build_vtkvis
	$(MAKE) -C $(vtkvis) all
endef
define install_vtkvis
	$(MAKE) -C $(vtkvis) install
endef
define touch_vtkvis
	touch $(vtkvis)/timestamp
endef

$(vtkvis)/timestamp: $(vtk)/timestamp 
	+ $(clean_vtkvis)
	+ $(configure_vtkvis)
	+ $(build_vtkvis)
	+ $(install_vtkvis)
	+ $(touch_vtkvis)

# -------------------------------------------------------------------------
#  ZLIB
# -------------------------------------------------------------------------

zlib_flags =	\
	--enable-shared \
	$(common_flags)

zlib: $(zlib)/timestamp

clean-zlib: 
	$(clean_zlib)
configure-zlib: 
	$(configure_zlib)
build-zlib: 
	$(build_zlib)
install-zlib: 
	$(install_zlib)
touch-zlib: 
	$(touch_zlib)
force-zlib: 
	+ $(clean_zlib)
	+ $(configure_zlib)
	+ $(build_zlib)
	+ $(install_zlib)
	+ $(touch_zlib)

define clean_zlib
	$(RM) -r $(zlib)
endef
define configure_zlib
	$(MKDIR_P) $(zlib)
	cd $(zlib); $(runtime)/$(zlib)/configure $(zlib_flags) 
endef
define build_zlib
	$(MAKE) -C $(zlib) all
endef
define install_zlib
	$(MAKE) -C $(zlib) install
endef
define touch_zlib
	touch $(zlib)/timestamp
endef

$(zlib)/timestamp: 
	+ $(clean_zlib)
	+ $(configure_zlib)
	+ $(build_zlib)
	+ $(install_zlib)
	+ $(touch_zlib)
