#!/usr/bin/env python

# ----------------------------------------------------------------------
#  MAIN PROGRAM - generated by the Rappture Builder
# ----------------------------------------------------------------------
import Rappture
import sys
import numpy as np

sys.stderr = open('main.err', 'w')
sys.stdout = open('main.out', 'w')

# open the XML file containing the run parameters
io = Rappture.PyXml(sys.argv[1])

#########################################################
# Get input values from Rappture
#########################################################

# get input value for input.number(height) and convert to m
str = io['input.number(height).current'].value
height = Rappture.Units.convert(str, to="m", units="off")

# get input value for input.number(velocity) and convert to m/s
str = io['input.number(velocity).current'].value
velocity = Rappture.Units.convert(str, to="m/s", units="off")

# get input value for input.number(angle) and convert to deg
str = io['input.number(angle).current'].value
angle = Rappture.Units.convert(str, to="deg", units="off")

# get input value for input.number(g) and convert to m/s2
str = io['input.number(g).current'].value
g = Rappture.Units.convert(str, to="m/s2", units="off")


#########################################################
#  Basic Physics below ...
#########################################################

Rappture.Utils.progress(0, "Starting...")

velx = velocity * np.cos(np.pi * angle / 180)
vely = velocity * np.sin(np.pi * angle / 180)

# compute time until vertical velocity is 0.
ttp = vely/g
maxheight = vely * ttp - (g * ttp**2) / 2.0
maxheight += height

# time to fall
ttf = np.sqrt(2 * maxheight / g)
ttime = ttp + ttf

distance = velx * ttime

Rappture.Utils.progress(5, "Loading data...")

# discretize time and visualize path
t = np.linspace(0, ttime, 200)
d = t * velx
h = height + vely * t - (g * t**2) / 2.0

Rappture.Utils.progress(100, "Done")

#########################################################
# Save output values back to Rappture
#########################################################

# The labels, descriptions and units are set in the
# tool.xml file.  All we need to do here is set the values.

# save output value for output.curve(path)
io['output.curve(path).component.xy'] = (d, h)

io['output.curve(height).component.xy'] = (t, h)

# save output value for output.number(distance)
io['output.number(distance).current'] = distance

# save output value for output.number(maxheight)
io['output.number(maxheight).current'] = maxheight

io.close()
