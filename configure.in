
AC_INIT([Rappture],[1.4],[rappture@nanohub.org])
AC_CONFIG_AUX_DIR(cf)

#------------------------------------------------------------------------
# Handle the --prefix=... option
#------------------------------------------------------------------------

if test "${prefix}" = "NONE"; then
    prefix=/usr/local
fi
if test "${exec_prefix}" = "NONE"; then
    exec_prefix=$prefix
fi

AC_ARG_WITH(
    [install],
    [AS_HELP_STRING([--with-install[=DIR]],
        [location of installation @<:@default=yes@:>@])],
    [],
    [with_install=yes])

if test "$with_install" != "yes"; then
    INSTALL_PREFIX=$with_install
else
    INSTALL_PREFIX=$prefix
fi


if test "${libdir}" != "${prefix}/lib"; then
    LIB_SEARCH_DIRS="-L${prefix}/lib -L${libdir}"
else
    LIB_SEARCH_DIRS="-L${libdir}"
fi


AC_PROG_INSTALL
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MKDIR_P
AC_PROG_MAKE_SET

AC_MSG_CHECKING([RAPPTURE_MAJOR_VERSION])
RAPPTURE_MAJOR_VERSION=1
AC_MSG_RESULT($RAPPTURE_MAJOR_VERSION)

AC_MSG_CHECKING([RAPPTURE_MINOR_VERSION])
RAPPTURE_MINOR_VERSION=4
AC_MSG_RESULT($RAPPTURE_MINOR_VERSION)

AC_MSG_CHECKING([RAPPTURE_RELEASE_SERIAL])
RAPPTURE_RELEASE_SERIAL=0
AC_MSG_RESULT($RAPPTURE_RELEASE_SERIAL)

RAPPTURE_VERSION=${RAPPTURE_MAJOR_VERSION}.${RAPPTURE_MINOR_VERSION}

AC_SUBST(VERSION)
AC_SUBST(RAPPTURE_VERSION)
AC_SUBST(RAPPTURE_MINOR_VERSION)
AC_SUBST(RAPPTURE_MAJOR_VERSION)
AC_SUBST(RAPPTURE_RELEASE_SERIAL)

AC_PATH_X

X_INCLUDES=${x_includes}
X_LIBRARIES=${x_libraries}
AC_SUBST(X_INCLUDES)
AC_SUBST(X_LIBRARIES)

# Check for C, C++, and FORTRAN 
AC_PROG_CC
AC_PROG_CXX
# Avoid g95 
AC_PROG_F77([g77 gfortran f77 fort77 f90 xlf xlf90 fl32])

AC_LANG([C])

AC_HEADER_STDC
AC_LANG([C++])

SC_CONFIG_CFLAGS

SVN_VERSION=`svnversion $srcdir`

make_command=""
for m in "$MAKE" make gmake gnumake ; do
  if test "x${m}" != "x" ; then
    if  ( sh -c "$m --version" 2>/dev/null | grep GNU >/dev/null ) ; then
      make_command=$m; break;
    fi
  fi
done
if test "x${make_command}" = "x" ; then
  AC_MSG_ERROR([Requires GNU make. You can specify a version with \$MAKE])
fi

AC_ARG_ENABLE(
    [gui],
    [AS_HELP_STRING([--enable-gui], [build code related to the graphical user interface @<:@default=yes@:>@])],
    [],
    [enable_gui=yes])

ENABLE_GUI=
if test "$enable_gui" != "no" ; then
    ENABLE_GUI="yes"
fi

TCL_VERSION="8.4"
for dir in \
 ${exec_prefix} \
 ${exec_prefix}/lib ; do 
  tclconfig="${dir}/tclConfig.sh"
  if test -f "$tclconfig" ; then
    . $tclconfig
    break
  fi
done

RP_BASE=`pwd`

SC_ENABLE_SHARED

# -----------------------------------------------------------------------
#
# Compiler characteristics:
#   Check for existence of types of size_t and pid_t
#
# -----------------------------------------------------------------------

AC_C_BIGENDIAN
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(void *)

SIZEOF_LONG="${ac_cv_sizeof_long}"
SIZEOF_LONG_LONG="${ac_cv_sizeof_long_long}"
SIZEOF_VOID_P="${ac_cv_sizeof_void_p}"
SIZEOF_INT="${ac_cv_sizeof_int}"


#--------------------------------------------------------------------
# Set the default compiler switches based on the --enable-symbols
# option.
#--------------------------------------------------------------------

SC_ENABLE_SYMBOLS

AC_SUBST(CFLAGS_DEBUG)
AC_SUBST(CFLAGS_OPTIMIZE)
AC_SUBST(ENABLE_GUI)
AC_SUBST(FFMPEG)
AC_SUBST(HAVE_FFMPEG_LIBS)
AC_SUBST(HAVE_INTTYPES_H)
AC_SUBST(HAVE_RUBY_DEVEL)
AC_SUBST(INSTALL_PREFIX)
AC_SUBST(JAVA)
AC_SUBST(JAVAC)
AC_SUBST(JAVAH)
AC_SUBST(JAVA_HOME)
AC_SUBST(JAVA_INC_DIR)
AC_SUBST(JAVA_INC_SPEC)
AC_SUBST(LIB_SEARCH_DIRS)
AC_SUBST(MAKE, ${make_command})
AC_SUBST(MATLAB)
AC_SUBST(MCC)
AC_SUBST(MEX)
AC_SUBST(MEXEXT)
AC_SUBST(MEX_ARCH)
AC_SUBST(MKOCTFILE2)
AC_SUBST(MKOCTFILE3)
AC_SUBST(SVN_VERSION)
AC_SUBST(OCTAVE_VERSION)
AC_SUBST(OCTAVE_VERSION_MAJOR)
AC_SUBST(PERL)
AC_SUBST(PERL_ARCHLIB)
AC_SUBST(PERL_ARCHLIBEXP)
AC_SUBST(PERL_CCFLAGS)
AC_SUBST(PERL_CPPFLAGS)
AC_SUBST(PERL_INCLUDES)
AC_SUBST(PERL_INSTALLARCHLIB)
AC_SUBST(PERL_LIBSPEC)
AC_SUBST(PERL_PRIVLIB)
AC_SUBST(PERL_VENDORLIB)
AC_SUBST(PERL_VERSION)
AC_SUBST(PERL_VERSION_RV)
AC_SUBST(PYTHON)
AC_SUBST(PYTHON_CFLAGS)
AC_SUBST(PYTHON_DISTUTILS)
AC_SUBST(PYTHON_INCDIR)
AC_SUBST(PYTHON_INCLUDES)
AC_SUBST(PYTHON_LDFLAGS)
AC_SUBST(PYTHON_LIB)
AC_SUBST(PYTHON_LIBDIR)
AC_SUBST(PYTHON_SITE_DIR)
AC_SUBST(PYTHON_SITE_PACKAGES)
AC_SUBST(PYTHON_VERSION)
AC_SUBST(R)
AC_SUBST(RP_BASE)
AC_SUBST(RUBY)
AC_SUBST(RUBY_PLATFORM)
AC_SUBST(RUBY_VERSION_RV)
AC_SUBST(SHLIB_CFLAGS)
AC_SUBST(SHLIB_LD)
AC_SUBST(SHLIB_LDFLAGS)
AC_SUBST(SHLIB_SUFFIX)
AC_SUBST(SIZEOF_INT)
AC_SUBST(SIZEOF_LONG)
AC_SUBST(SIZEOF_LONG_LONG)
AC_SUBST(SIZEOF_VOID_P)
AC_SUBST(STLIB_LD)
AC_SUBST(TCLSH)
AC_SUBST(TCL_INC_SPEC)
AC_SUBST(TCL_LIB_SPEC)
AC_SUBST(TCL_CFLAGS_DEBUG)
AC_SUBST(TCL_CFLAGS_OPTIMIZE)
AC_SUBST(TCL_SHLIB_CFLAGS)
AC_SUBST(TCL_SHLIB_LD)
AC_SUBST(TCL_SHLIB_LDFLAGS)
AC_SUBST(TCL_SHLIB_SUFFIX)
AC_SUBST(TCL_VERSION)
AC_SUBST(TCL_VERSION)
AC_SUBST(TK_INC_SPEC)
AC_SUBST(TK_LIB_SPEC)
AC_SUBST(TCL_CFLAGS_DEBUG)
AC_SUBST(TCL_SHLIB_CFLAGS)
AC_SUBST(TCL_SHLIB_SUFFIX)
AC_SUBST(TCL_SHLIB_LD)
AC_SUBST(TCL_SHLIB_LDFLAGS)
AC_SUBST(TK_XLIBSW)
AC_SUBST(TK_VERSION)
AC_SUBST(VTKDIR)
AC_SUBST(XSUBPP)

ac_configure_args="--disable-threads --enable-shared"
AC_CONFIG_SUBDIRS( [packages/optimizer/src] )

dnl read Makefile.in and write Makefile
AC_CONFIG_FILES([
    Makefile
    objects/Makefile
    system/Makefile
    builder/Makefile
    builder/scripts/Makefile
    builder/scripts/tclIndex
    builder/pkgIndex.tcl
])
AC_OUTPUT
	
