# Commands covered:
#   Rappture::GeoMapDataProviderColorramp
#
# This file contains a collection of tests for one of the Rappture Tcl
# commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# ======================================================================
# AUTHOR:  Derrick Kearney, Purdue University
# Copyright (c) 2004-2015  HUBzero Foundation, LLC
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.


if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    package require RapptureGUI
    namespace import -force ::tcltest::*
}
catch {unset lib}

proc check {var size} {
    set l [llength $var]
    if {$l != $size} {
        return "length mismatch: should have been $size, was $l"
    }
    for {set i 0} {$i < $size} {set i [expr $i+1]} {
        set j [lindex $var $i]
        if {$j != "item $i"} {
            return "element $i should have been \"item $i\", was \"$j\""
        }
    }
    return ok
}

# temporary class for testing protected methods
itcl::class TestDataProviderColorramp {
    inherit Rappture::GeoMapDataProviderColorramp

    constructor {url colormap args} {
        Rappture::GeoMapDataProviderColorramp::constructor $url $colormap
    } {
        eval configure $args
    }
    destructor {
        # empty
    }
    public method do { args } {eval $args}
}

#----------------------------------------------------------
#----------------------------------------------------------
# constructor command
# Rappture::GeoMapDataProviderColorramp <name> <url> <colormap>
#----------------------------------------------------------
test geomapdataprovidercolorramp-1.1 {Rappture::GeoMapDataProviderColorramp, 0 arguments} {
    list [catch {Rappture::GeoMapDataProviderColorramp} msg] $msg
} {0 {}}


test geomapdataprovidercolorramp-1.2 {
    Rappture::GeoMapDataProviderColorramp, name url
} -body {
    list [catch {Rappture::GeoMapDataProviderColorramp name \
                    "file:///myimage.tif" \
                    -colormap "0 0 0 0 1 1 1 1 1 1" \
                    -elevdriver "gdal" \
                    -profile "geodetic"
                } msg] $msg
} -cleanup {
    catch {itcl::delete object name} err
} -result {0 name}


#----------------------------------------------------------
# colormap flag
# $dp configure -colormap $colormap
#----------------------------------------------------------
test geomapdataprovidercolorramp-2.2 {Colormap, set new colorramp} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 1 1 1 1"} msg] $msg
} {0 {}}

test geomapdataprovidercolorramp-2.3 {Colormap, empty list} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap ""} msg] $msg
} {1 {bad value "": should be a non-empty list of doubles}}

test geomapdataprovidercolorramp-2.4 {Colormap, missing values} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 1 1 1"} msg] $msg
} {1 {bad value "0 0 0 0 1 1 1 1 1": colormap entries should have 5 values each}}

test geomapdataprovidercolorramp-2.5.1 {Colormap, invalid point, non-numeric} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 a 1 1 1 1"} msg] $msg
} {1 {bad value "a": should be a double}}

test geomapdataprovidercolorramp-2.5.2 {Colormap, invalid point, non-double} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 4.3.3 1 1 1 1"} msg] $msg
} {1 {bad value "4.3.3": should be a double}}

test geomapdataprovidercolorramp-2.6.1 {Colormap, invalid red, non-numeric} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 a 1 1 1"} msg] $msg
} {1 {bad value "a": should be a double}}

test geomapdataprovidercolorramp-2.6.2 {Colormap, invalid red, non-double} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 4.3.3 1 1 1"} msg] $msg
} {1 {bad value "4.3.3": should be a double}}

test geomapdataprovidercolorramp-2.6.3 {Colormap, invalid red, out of range} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 4 1 1 1"} msg] $msg
} {1 {bad value "4": should be in range [0.0,1.0]}}

test geomapdataprovidercolorramp-2.7.1 {Colormap, invalid green, non-numeric} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 1 a 1 1"} msg] $msg
} {1 {bad value "a": should be a double}}

test geomapdataprovidercolorramp-2.7.2 {Colormap, invalid green, non-double} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 1 4.3.3 1 1"} msg] $msg
} {1 {bad value "4.3.3": should be a double}}

test geomapdataprovidercolorramp-2.7.3 {Colormap, invalid green, out of range} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 1 4 1 1"} msg] $msg
} {1 {bad value "4": should be in range [0.0,1.0]}}

test geomapdataprovidercolorramp-2.8.1 {Colormap, invalid blue, non-numeric} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 1 1 a 1"} msg] $msg
} {1 {bad value "a": should be a double}}

test geomapdataprovidercolorramp-2.8.2 {Colormap, invalid blue, non-double} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 1 1 4.3.3 1"} msg] $msg
} {1 {bad value "4.3.3": should be a double}}

test geomapdataprovidercolorramp-2.8.3 {Colormap, invalid blue, out of range} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 1 1 4 1"} msg] $msg
} {1 {bad value "4": should be in range [0.0,1.0]}}

test geomapdataprovidercolorramp-2.9.1 {Colormap, invalid alpha, non-numeric} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 1 1 1 a"} msg] $msg
} {1 {bad value "a": should be a double}}

test geomapdataprovidercolorramp-2.9.2 {Colormap, invalid alpha, non-double} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 1 1 1 4.3.3"} msg] $msg
} {1 {bad value "4.3.3": should be a double}}

test geomapdataprovidercolorramp-2.9.3 {Colormap, invalid alpha, out of range} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -colormap "0 0 0 0 1 1 1 1 1 4"} msg] $msg
} {1 {bad value "4": should be in range [0.0,1.0]}}


#----------------------------------------------------------
# elevdriver flag
# $dp configure -elevdriver gdal
#----------------------------------------------------------
test geomapdataprovidercolorramp-3.1 {elevdriver, set new elevdriver} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -elevdriver "tms"} msg] $msg
} {0 {}}

test geomapdataprovidercolorramp-3.2 {elevdriver, empty list} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -elevdriver ""} msg] $msg
} {1 {bad value "": should be a non-empty string}}

test geomapdataprovidercolorramp-3.3 {elevdriver, set new elevdriver} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    $dp configure -elevdriver "tms"
    list [catch {$dp cget -elevdriver} msg] $msg
} {0 tms}


#----------------------------------------------------------
# profile flag
# $dp configure -profile geodetic
#----------------------------------------------------------
test geomapdataprovidercolorramp-4.1 {profile, set new profile} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -profile "geodetic"} msg] $msg
} {0 {}}

test geomapdataprovidercolorramp-4.2 {profile, empty string} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    list [catch {$dp configure -profile ""} msg] $msg
} {1 {bad value "": should be a non-empty string}}

test geomapdataprovidercolorramp-4.3 {elevdriver, set new elevdriver} {
    set dp [Rappture::GeoMapDataProviderColorramp #auto "file:///myimage.tif"]
    $dp configure -profile "global-geodetic"
    list [catch {$dp cget -profile} msg] $msg
} {0 global-geodetic}


#----------------------------------------------------------
# exportToBltTree
# $dp exportToBltTree $tree
#----------------------------------------------------------

test geomapdataprovidercolorramp-3.1 {exportToBltTree, } {
    set dp [Rappture::GeoMapDataProviderColorramp #auto\
                "file:///myimage.tif"]
    set tree [blt::tree create]
    $dp exportToBltTree $tree
    $tree dump root
} {-1 0 ::tree0 {type image driver colorramp cache true attribution {} colorramp.url file:///myimage.tif colorramp.colormap {0 0 0 0 1 1 1 1 1 1} colorramp.elevdriver gdal profile geodetic} {}
}


# TODO:

::tcltest::cleanupTests
return

