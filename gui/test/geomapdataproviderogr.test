# Commands covered:
#   Rappture::GeoMapDataProviderOGR
#
# This file contains a collection of tests for one of the Rappture Tcl
# commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# ======================================================================
# AUTHOR:  Derrick Kearney, Purdue University
# Copyright (c) 2004-2015  HUBzero Foundation, LLC
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.


if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    package require RapptureGUI
    namespace import -force ::tcltest::*
}
catch {unset lib}

proc check {var size} {
    set l [llength $var]
    if {$l != $size} {
        return "length mismatch: should have been $size, was $l"
    }
    for {set i 0} {$i < $size} {set i [expr $i+1]} {
        set j [lindex $var $i]
        if {$j != "item $i"} {
            return "element $i should have been \"item $i\", was \"$j\""
        }
    }
    return ok
}

# temporary class for testing protected methods
itcl::class TestDataProviderOGR {
    inherit Rappture::GeoMapDataProviderOGR

    constructor {type url args} {
        Rappture::GeoMapDataProviderOGR::constructor $type $url
    } {
        eval configure $args
    }
    destructor {
        # empty
    }
    public method do { args } {eval $args}
}

#----------------------------------------------------------
#----------------------------------------------------------
# constructor command
# Rappture::GeoMapDataProviderOGR <name> <type> <url>
#----------------------------------------------------------
test geomapdataproviderogr-1.1 {Rappture::GeoMapDataProviderOGR, 0 arguments} {
    list [catch {Rappture::GeoMapDataProviderOGR} msg] $msg
} {0 {}}


test geomapdataproviderogr-1.2 {Rappture::GeoMapDataProviderOGR, 1 arguments} {
    list [catch {Rappture::GeoMapDataProviderOGR name "line"} msg] $msg
} {1 {wrong # args: should be "::Rappture::GeoMapDataProviderOGR name type url ?arg arg ...?"}}


test geomapdataproviderogr-1.3 {
    Rappture::GeoMapDataProviderOGR, name type url
} -body {
    list [catch {Rappture::GeoMapDataProviderOGR name "line" "http://myurl.com/"} msg] $msg
} -cleanup {
    catch {itcl::delete object name} err
} -result {0 name}


#----------------------------------------------------------
# Type command
# $dp Type
# $dp Type <type>
#----------------------------------------------------------
test geomapdataproviderogr-2.1 {Type, 0 arguments} {
    set dp [TestDataProviderOGR #auto "line" {http://myurl.com/}]
    list [catch {$dp do Type} msg] $msg
} {0 line}

test geomapdataproviderogr-2.2 {Type, set type to "icon"} {
    set dp [TestDataProviderOGR #auto "line" {http://myurl.com/}]
    list [catch {$dp do Type "icon"} msg] $msg
} {0 icon}

test geomapdataproviderogr-2.3 {Type, set type to "line"} {
    set dp [TestDataProviderOGR #auto "icon" {http://myurl.com/}]
    list [catch {$dp do Type "line"} msg] $msg
} {0 line}

test geomapdataproviderogr-2.4 {Type, set type to "point"} {
    set dp [TestDataProviderOGR #auto "line" {http://myurl.com/}]
    list [catch {$dp do Type "point"} msg] $msg
} {0 point}

test geomapdataproviderogr-2.5 {Type, set type to "polygon"} {
    set dp [TestDataProviderOGR #auto "line" {http://myurl.com/}]
    list [catch {$dp do Type "polygon"} msg] $msg
} {0 polygon}

test geomapdataproviderogr-2.6 {Type, set type to "text"} {
    set dp [TestDataProviderOGR #auto "line" {http://myurl.com/}]
    list [catch {$dp do Type "text"} msg] $msg
} {0 text}

test geomapdataproviderogr-2.7 {Type, set type to "image"} {
    set dp [TestDataProviderOGR #auto "line" {http://myurl.com/}]
    list [catch {$dp do Type "image"} msg] $msg
} {1 {bad value "image": should be one of "icon line point polygon text"}}

test geomapdataproviderogr-2.8 {Type, set type to "elevation"} {
    set dp [TestDataProviderOGR #auto "line" {http://myurl.com/}]
    list [catch {$dp do Type "elevation"} msg] $msg
} {1 {bad value "elevation": should be one of "icon line point polygon text"}}

test geomapdataproviderogr-2.9 {Type, set type to "feature"} {
    set dp [TestDataProviderOGR #auto "line" {http://myurl.com/}]
    list [catch {$dp do Type "feature"} msg] $msg
} {1 {bad value "feature": should be one of "icon line point polygon text"}}

test geomapdataproviderogr-2.10 {Type, set type to "badname"} {
    set dp [TestDataProviderOGR #auto "line" {http://myurl.com/}]
    list [catch {$dp do Type "badname"} msg] $msg
} {1 {bad value "badname": should be one of "icon line point polygon text"}}

test geomapdataproviderogr-2.11 {Type, set type to ""} {
    set dp [TestDataProviderOGR #auto "line" {http://myurl.com/}]
    list [catch {$dp do Type ""} msg] $msg
} {1 {bad value "": should be a non-empty string}}

test geomapdataproviderogr-2.12 {Type, set type to "line" and retrieve type} {
    set dp [TestDataProviderOGR #auto "icon" {http://myurl.com/}]
    $dp do Type "line"
    list [catch {$dp do Type} msg] $msg
} {0 line}


#----------------------------------------------------------
# exportToBltTree
# $dp exportToBltTree $tree
#----------------------------------------------------------

test geomapdataproviderogr-3.1 {exportToBltTree, } {
    set dp [Rappture::GeoMapDataProviderOGR #auto "line" {http://myurl.com/}]
    set tree [blt::tree create]
    $dp exportToBltTree $tree
    $tree dump root
} {-1 0 ::tree0 {type line driver ogr cache true attribution {} ogr.url http://myurl.com/} {}
}


# TODO:

::tcltest::cleanupTests
return
