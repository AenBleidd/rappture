#!/usr/bin/env python
# ----------------------------------------------------------------------
#  rerun
#  
#  script to view the output of a previously created run.xml file
#  rerunning the simulation with new data is outside of the scope
#  of this script. it is currently only for viewing the output
#  of a previously created run.xml file.
#  
#
#  RUN AS FOLLOWS:
#    rerun [-h | -d rappture_path] <runFile>
#
#      -h | --help                  - print the help menu
#      -d | --driver rappture_path  - specify the path to the rappture
#                                     command. You will need to specify
#                                     the path if the rappture command is
#                                     not in your PATH environment 
#                                     variable.
#
#      <runFile>      - the run.xml file containing an output 
#                       section you would like to re-generate.
#
# ======================================================================
#  AUTHOR:  Derrick Kearney, Purdue University
#  Copyright (c) 2004-2008  Purdue Research Foundation
#
#  See the file "license.terms" for information on usage and
#  redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# ======================================================================
#
#

import getopt, shutil, re, os, sys, tempfile

def help():
    return """rerun [-h | -d rappture_path] runFile
      Visualize the output from a run.xml. This tool does not resimulate.

      -h | --help                  - print the help menu
      -d | --driver rappture_path  - specify the path to the rappture
                                     command. You will need to specify
                                     the path if the rappture command is
                                     not in your PATH environment
                                     variable.

      <runFile>      - the run.xml file containing an output
                       section you would like to re-generate.
"""

def main(argv=None):

    if argv is None:
        argv = sys.argv

    if len(argv) < 2:
        print >>sys.stderr, "%s requires at least 2 arguments" % (argv[0])
        print >>sys.stderr, help()
        return 2

    longOpts = ["driver=","help"]
    shortOpts = "d:h"
    try:
        opts, args = getopt.getopt(argv[1:], shortOpts, longOpts)
    except getopt.GetoptError, msg:
        print >>sys.stderr, msg
        print >>sys.stderr, help()
        return 2

    driverPath = 'rappture'

    # match options
    for o, v in opts:
        if o in ("-d", "--driver"):
            driverPath = v
        elif o in ("-h", "--help"):
            print >>sys.stderr, help()
            return 2

    runFile = args[0]

    # look for the text <command> (any characters) </command>
    re_command = re.compile(r'<command>.*</command>', re.I|re.DOTALL)

    try:
        xmlfile = open(runFile, "rb").read()
    except IOError, msg:
        print >>sys.stderr, msg
        return 2

    myTmpFilefd, myTmpFileName = tempfile.mkstemp()
    myTmpFile = os.fdopen(myTmpFilefd,'w+b')

    outCmd =  '<command>echo =RAPPTURE-RUN=>' \
            + myTmpFileName.encode('string_escape') \
            + '</command>'


    # do the file <command> switheroo!
    outText = re_command.sub(outCmd,xmlfile)

    # This should be fixed in rappture,
    # until it is fixed there, we do it here
    # look for the pesty self terminating current tags <current/>
    # do the file <current/> switheroo!
    re_current = re.compile(r'<current/>',re.I|re.DOTALL)
    outText = re_current.sub('',outText)

    myTmpFile.write(outText)
    myTmpFile.flush()

    # run driver on the temporary run file
    systemCmd = '%s -tool %s' % (driverPath, myTmpFileName)
    #FIXME: do we really need to shell out? Rappture.tools.getCommandOutput()?
    os.system(systemCmd)

    # presto-change-o
    
    # clean up our tmp file
    # tempfile module does not auto delete files created by mkstemp on close
    myTmpFile.close()
    if os.path.exists(myTmpFileName):
        # python2.3 seems to have a bug where the tempfile
        # is automatically removed. this is fixed in python2.5
        os.remove(myTmpFileName)

    return 0

if __name__ == '__main__' :
    # call main and exit gracefully
    sys.exit(main())
