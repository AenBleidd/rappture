/*
 * ======================================================================
 *  AUTHOR:  Wei Qiao <qiaow@purdue.edu>
 *           Purdue Rendering and Perceptualization Lab (PURPL)
 *
 *  Copyright (c) 2004-2006  Purdue Research Foundation
 *
 *  See the file "license.terms" for information on usage and
 *  redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 * ======================================================================
 */
#include "common.cg"

/*
 * render one volume 
 */
PixelOut main(v2f IN, /* uniform sampler1D tf,*/
		uniform sampler3D volume,
		//uniform sampler1D map,
		uniform float4x4 modelViewInv,
		uniform float4 renderParameters)
{
	
  PixelOut OUT;
  float4 tex_coord = mul(modelViewInv, IN.TexCoord);
	
  if(renderParameters.y==1){
    //1 component
    float sample = tex3D(volume, tex_coord.xyz);

    if (sample.x < 0.) {
      OUT.Color = float4(0.0, 0.0, 0.0, 0.0);
    } 
    else{
      //shades of red //more opaque
      OUT.Color = float4(sample, 0, 0, 7*sample/renderParameters.x);

      if(sample<0.6 && sample>0.4){
        OUT.Color = float4(0, 0, 1, 10*sample/renderParameters.x);
      }
    }
  }

  else if(renderParameters.y==0){

    //3 component
    float3 sample = tex3D(volume, tex_coord.xyz).xyz;
    
    OUT.Color = float4(3*sample, 2*length(sample)/renderParameters.x);
  }

//debug
//OUT.Color = float4(tex_coord, 1);

  return OUT;
}
