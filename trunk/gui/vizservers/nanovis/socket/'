/*
 *  RenderServer.cpp: server with OpenRenderer engine
 */

#include "RenderServer.h"


RenderServer::RenderServer(){}

RenderServer::RenderServer(int port_num){

	socket_num = port_num;

	//init socket server
	std::cout << "server up and  running....\n";

	try
    	{
      	  // Create the socket
      	  server_socket = new ServerSocket(socket_num);
	  server_socket->set_non_blocking(true);

        }
  	catch ( SocketException& e )
    	{
      	  std::cout << "Exception was caught:" << e.description() << "\nExiting.\n";
    	}
}


std::string& RenderServer::listen(){

    if(!open_socket.is_connected()){
      if(server_socket->accept(open_socket)){
       	printf("server: connection accepted\n");
        try
        {
	   std::string data;
	   open_socket >> data;
	   //std::cout << "server: msg received - " << data << "\n";

  	   open_socket << data;
	   //return true;
         }
         catch ( SocketException& ) { /*return false;*/}
      }
    }
    else{
      try
      {
	std::string data;
	open_socket >> data;
	//std::cout << "server: msg received - " << data << "\n";

  	open_socket << data;

	//return true;
       }
       catch ( SocketException& ) { /*return false;*/}
    }
}

