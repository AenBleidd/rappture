# Commands covered:
#   Rappture::GeoMapDataProviderWMS
#
# This file contains a collection of tests for one of the Rappture Tcl
# commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# ======================================================================
# AUTHOR:  Derrick Kearney, Purdue University
# Copyright (c) 2004-2015  HUBzero Foundation, LLC
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.


if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    package require RapptureGUI
    namespace import -force ::tcltest::*
}
catch {unset lib}

proc check {var size} {
    set l [llength $var]
    if {$l != $size} {
        return "length mismatch: should have been $size, was $l"
    }
    for {set i 0} {$i < $size} {set i [expr $i+1]} {
        set j [lindex $var $i]
        if {$j != "item $i"} {
            return "element $i should have been \"item $i\", was \"$j\""
        }
    }
    return ok
}

# temporary class for testing protected methods
itcl::class TestDataProviderWMS {
    inherit Rappture::GeoMapDataProviderWMS

    constructor {url layers format args} {
        Rappture::GeoMapDataProviderWMS::constructor $url $layers $format
    } {
        eval configure $args
    }
    destructor {
        # empty
    }
    public method do { args } {eval $args}
}

#----------------------------------------------------------
#----------------------------------------------------------
# constructor command
# Rappture::GeoMapDataProviderWMS <name> <url> <layers> <format>
#----------------------------------------------------------
test geomapdataproviderwms-1.1 {Rappture::GeoMapDataProviderWMS, 0 arguments} {
    list [catch {Rappture::GeoMapDataProviderWMS} msg] $msg
} {0 {}}

test geomapdataproviderwms-1.2 {Rappture::GeoMapDataProviderWMS, 1 arguments} {
    list [catch {Rappture::GeoMapDataProviderWMS name "http://myurl.com/"} msg] $msg
} {1 {wrong # args: should be "::Rappture::GeoMapDataProviderWMS name url layers format ?arg arg ...?"}}

test geomapdataproviderwms-1.3 {Rappture::GeoMapDataProviderWMS, 2 arguments} {
    list [catch {Rappture::GeoMapDataProviderWMS name "http://myurl.com/" "foo:bar"} msg] $msg
} {1 {wrong # args: should be "::Rappture::GeoMapDataProviderWMS name url layers format ?arg arg ...?"}}

test geomapdataproviderwms-1.4 {
    Rappture::GeoMapDataProviderWMS, name url layers format
} -body {
    list [catch {Rappture::GeoMapDataProviderWMS name \
        "http://myurl.com/" "foo:bar" "jpeg"} msg] $msg
} -cleanup {
    catch {itcl::delete object name} err
} -result {0 name}


#----------------------------------------------------------
# layers command
# $dp layers
# $dp layers <name>
#----------------------------------------------------------
test geomapdataproviderwms-2.1 {layers, 0 arguments} {
    set dp [Rappture::GeoMapDataProviderWMS #auto "http://myurl.com/" "foo:bar" "jpeg"]
    list [catch {$dp layers} msg] $msg
} {0 foo:bar}

test geomapdataproviderwms-2.2 {layers, 1 arguments} {
    set dp [Rappture::GeoMapDataProviderWMS #auto "http://myurl.com/" "foo:bar" "jpeg"]
    list [catch {$dp layers "ident:name"} msg] $msg
} {0 ident:name}

test geomapdataproviderwms-2.3 {layers, empty string} {
    set dp [Rappture::GeoMapDataProviderWMS #auto "http://myurl.com/" "foo:bar" "jpeg"]
    list [catch {$dp layers ""} msg] $msg
} {1 {bad value "": should be a non-empty list of strings}}


#----------------------------------------------------------
# format command
# $dp format
# $dp format <name>
#----------------------------------------------------------
test geomapdataproviderwms-3.1 {format, 0 arguments} {
    set dp [Rappture::GeoMapDataProviderWMS #auto "http://myurl.com/" "foo:bar" "jpeg"]
    list [catch {$dp format} msg] $msg
} {0 jpeg}

test geomapdataproviderwms-3.2 {format, 1 arguments} {
    set dp [Rappture::GeoMapDataProviderWMS #auto "http://myurl.com/" "foo:bar" "jpeg"]
    list [catch {$dp format "png"} msg] $msg
} {0 png}

test geomapdataproviderwms-3.3 {format, empty string} {
    set dp [Rappture::GeoMapDataProviderWMS #auto "http://myurl.com/" "foo:bar" "jpeg"]
    list [catch {$dp format ""} msg] $msg
} {1 {bad value "": should be a non-empty string}}


#----------------------------------------------------------
# exportToBltTree
# $dp exportToBltTree $tree
#----------------------------------------------------------

test geomapdataproviderwms-4.1 {exportToBltTree, } {
    set dp [Rappture::GeoMapDataProviderWMS #auto "http://myurl.com/" "foo:bar" "jpeg"]
    set tree [blt::tree create]
    $dp exportToBltTree $tree
    $tree dump root
} {-1 0 ::tree0 {type image driver wms cache true attribution {} wms.url http://myurl.com/ wms.layers foo:bar wms.format jpeg wms.transparent false} {}
}

#----------------------------------------------------------
# transparent flag
# $dp configure -transparent <bool>
# $dp cget -transparent
#----------------------------------------------------------
test geomapdataproviderwms-5.1 {transparent, configure true} {
    set dp [Rappture::GeoMapDataProviderWMS #auto "http://myurl.com/" "foo:bar" "jpeg"]
    list [catch {$dp configure -transparent true} msg] $msg
} {0 {}}

test geomapdataproviderwms-5.2 {transparent, configure false} {
    set dp [Rappture::GeoMapDataProviderWMS #auto "http://myurl.com/" "foo:bar" "jpeg"]
    list [catch {$dp configure -transparent false} msg] $msg
} {0 {}}

test geomapdataproviderwms-5.3 {transparent, configure empty string} {
    set dp [Rappture::GeoMapDataProviderWMS #auto "http://myurl.com/" "foo:bar" "jpeg"]
    list [catch {$dp configure -transparent ""} msg] $msg
} {1 {bad value "": should be a non-empty boolean}}

test geomapdataproviderwms-5.4 {transparent, cget} {
    set dp [Rappture::GeoMapDataProviderWMS #auto "http://myurl.com/" "foo:bar" "jpeg"]
    list [catch {$dp cget -transparent} msg] $msg
} {0 false}


# TODO:

::tcltest::cleanupTests
return

