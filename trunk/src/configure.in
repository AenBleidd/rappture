
AC_INIT([Rappture],[1.4],[rappture@nanohub.org])
AC_CONFIG_AUX_DIR(../cf)
AC_CONFIG_HEADER(core/config.h)

#------------------------------------------------------------------------
# Handle the --prefix=... option
#------------------------------------------------------------------------

if test "${prefix}" = "NONE"; then
    prefix=/usr/local
fi
if test "${exec_prefix}" = "NONE"; then
    exec_prefix=$prefix
fi

AC_ARG_WITH(
    [install],
    [AS_HELP_STRING([--with-install[=DIR]],
        [location of installation @<:@default=yes@:>@])],
    [],
    [with_install=yes])

if test "$with_install" != "yes"; then
    INSTALL_PREFIX=$with_install
else
    INSTALL_PREFIX=$prefix
fi


if test "${libdir}" != "${prefix}/lib"; then
    LIB_SEARCH_DIRS="-L${prefix}/lib -L${libdir}"
else
    LIB_SEARCH_DIRS="-L${libdir}"
fi

AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_LN_S
AC_PROG_MKDIR_P
AC_PROG_MAKE_SET

# Check for C, C++, and FORTRAN 
AC_PROG_CC
AC_PROG_CXX
# Avoid g95 
AC_PROG_F77([g77 gfortran f77 fort77 f90 xlf xlf90 fl32])

AC_LANG([C])

AC_HEADER_STDC
AC_CHECK_FUNC(atol,,AC_MSG_ERROR(oops! no atol ?!?))

AC_LANG([C++])

AC_CHECK_HEADERS(assert.h,,AC_MSG_WARN(C headers missing ?))
AC_CHECK_HEADERS(ctype.h,,AC_MSG_WARN(C headers missing ?))
AC_CHECK_HEADERS(errno.h,,AC_MSG_WARN(C headers missing ?))
AC_CHECK_HEADERS(limits.h,,AC_MSG_WARN(C headers missing ?))
AC_CHECK_HEADERS(string.h,,AC_MSG_WARN(C headers missing ?))
AC_CHECK_HEADERS(stdlib.h,,AC_MSG_WARN(C headers missing ?))
AC_CHECK_HEADERS(stddef.h,,AC_MSG_WARN(C headers missing ?))
AC_CHECK_HEADERS(float.h,,AC_MSG_WARN(C headers missing ?))
AC_CHECK_HEADERS(math.h,,AC_MSG_WARN(C headers missing ?))
dnl AC_CHECK_HEADERS(ieeefp.h,,AC_MSG_WARN(C headers missing ?))
AC_CHECK_HEADERS(malloc.h,,AC_MSG_WARN(C headers missing ?))
AC_CHECK_HEADERS(memory.h,,AC_MSG_WARN(C headers missing ?))
AC_CHECK_HEADERS(unistd.h,,AC_MSG_WARN(C headers missing ?))

AC_CHECK_HEADERS(inttypes.h,,AC_MSG_WARN(C headers missing ?))
if test "${ac_cv_header_inttypes_h}" = "yes" ; then
  HAVE_INTTYPES_H=1
else
  HAVE_INTTYPES_H=0
fi

SC_CONFIG_CFLAGS

SVN_VERSION=`svnversion $srcdir`

make_command=""
for m in "$MAKE" make gmake gnumake ; do
  if test "x${m}" != "x" ; then
    if  ( sh -c "$m --version" 2>/dev/null | grep GNU >/dev/null ) ; then
      make_command=$m; break;
    fi
  fi
done
if test "x${make_command}" = "x" ; then
  AC_MSG_ERROR([Requires GNU make. You can specify a version with \$MAKE])
fi

SC_ENABLE_SHARED

# -----------------------------------------------------------------------
#
# Compiler characteristics:
#   Check for existence of types of size_t and pid_t
#
# -----------------------------------------------------------------------

AC_C_BIGENDIAN
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(void *)

SIZEOF_LONG="${ac_cv_sizeof_long}"
SIZEOF_LONG_LONG="${ac_cv_sizeof_long_long}"
SIZEOF_VOID_P="${ac_cv_sizeof_void_p}"
SIZEOF_INT="${ac_cv_sizeof_int}"


#--------------------------------------------------------------------
# Set the default compiler switches based on the --enable-symbols
# option.
#--------------------------------------------------------------------

SC_ENABLE_SYMBOLS

AC_SUBST(CFLAGS_DEBUG)
AC_SUBST(CFLAGS_OPTIMIZE)
AC_SUBST(HAVE_INTTYPES_H)
AC_SUBST(INSTALL_PREFIX)
AC_SUBST(LIB_SEARCH_DIRS)
AC_SUBST(MAKE, ${make_command})
AC_SUBST(SVN_VERSION)
AC_SUBST(SHLIB_CFLAGS)
AC_SUBST(SHLIB_LD)
AC_SUBST(SHLIB_LDFLAGS)
AC_SUBST(SHLIB_SUFFIX)
AC_SUBST(SIZEOF_INT)
AC_SUBST(SIZEOF_LONG)
AC_SUBST(SIZEOF_LONG_LONG)
AC_SUBST(SIZEOF_VOID_P)
AC_SUBST(STLIB_LD)

ac_configure_args="--disable-threads --enable-shared"
AC_CONFIG_SUBDIRS( [packages/optimizer/src] )

dnl read Makefile.in and write Makefile
AC_CONFIG_FILES([
  Makefile
  core/Makefile
  core2/Makefile
  objects/Makefile
  objects/RpHash.h
])
AC_OUTPUT
	
