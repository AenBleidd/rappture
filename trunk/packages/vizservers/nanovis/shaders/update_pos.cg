/*
 * ======================================================================
 *  AUTHOR:  Wei Qiao <qiaow@purdue.edu>
 *           Purdue Rendering and Perceptualization Lab (PURPL)
 *
 *  Copyright (c) 2004-2006  Purdue Research Foundation
 *
 *  See the file "license.terms" for information on usage and
 *  redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 * ======================================================================
 */

// update positions based on velocity

#include "common.cg"

float4 main(in float2 uv : TEXCOORD0,
            uniform samplerRECT pos_tex,
            uniform samplerRECT init_pos_tex,
            uniform sampler3D vel_tex,
//            uniform sampler1D tf_tex,
            uniform float timestep,
            uniform float max,
            uniform float mode,
            uniform float3 scale
            ) : COLOR
{
    float4 ret;
/*
    if (mode == 0)
    {
        float4 pos = texRECT(pos_tex, uv);
        float4 vel = tex3D(vel_tex, pos.xyz);
        ret.xyz = tex1D(tf_tex, vel.x).xyz;
	ret.w = 1;
    }
    else
    {
*/
    // get previous position and velocity
    float4 pos = texRECT(pos_tex, uv);
    float time = pos.w;

    // TBD...
    //time -= 0.01;

    if (time < 0)
    {
    	pos = texRECT(init_pos_tex, uv);
	time = pos.w;
    }

	/// INSOO
	// TEMP
    if (max > 100) max = 100;

    //reconstruct negative value
    //float4 vel = float4(tex3D(vel_tex, pos.xyz).xyz, 0) - float4(0.5, 0.5, 0.5, 0.0f);
    float4 vel = float4(tex3D(vel_tex, pos.xyz).yzw, 0) - float4(0.5, 0.5, 0.5, 0.0f);
    vel = vel * (2 * max);
    //vel.x *= scale.x;
    //vel.y *= scale.y;
    //vel.z *= scale.z;
    ret = pos;

    ret.x += vel.x * 0.0005;
    ret.y += vel.y * 0.0005;
    ret.z += vel.z * 0.0005;

    //not drawing if the particle is out of bound
    /*
    if(ret.x<0 || ret.x>1 || ret.y<0 || ret.y>1 || ret.z<0 || ret.z>1 || time==0)
      ret = float4(0,0,0,0); 
    else
      ret.w = 1;
    */
    if(ret.x<0 || ret.x>1 || ret.y<0 || ret.y>1 || ret.z<0 || ret.z>1)
    {
    	ret = texRECT(init_pos_tex, uv);
    }
    else
    {
      ret.w = time;
    }
//    }

    return ret;
}
