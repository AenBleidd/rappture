Curve

constructors/destructors
    Curve()
    Curve(const char *name);
    Curve(const char *name, const char *label,
            const char *desc, const char *group);
    Curve(const Curve& o);
    ~Curve ();

methods
    const char *name() const;
    void name(const char *val);

    const char *path() const;
    void path(const char *val);

    const char *label() const;
    void label(const char *val);

    const char *desc() const;
    void desc(const char *val);

    const char *hints() const;
    void hints(const char *val);

    const char *color() const;
    void color(const char *val);

    Array1D *axis(const char *name, const char *label,
                  const char *desc, const char *units,
                  const char *scale, const char *val, size_t size);

    Curve& delAxis(const char *name);

    size_t data(const char *label, const double **arr) const;

    Array1D *getAxis(const char *name) const;

    Array1D *getNthAxis(size_t n) const;

    const char *group() const;
    void group(const char *g);

    size_t dims() const;

    const void *property (const char *key) const;
    void property (const char *key, const void *val, size_t nbytes);

    const char *propstr (const char *key) const;
    void propstr (const char *key, const char *val);

    void propremove (const char *key);

    void vvalue(void *storage, size_t numHints, va_list arg) const;
    void random();
    Rp_Chain *diff(const Object& o);

    void configure(size_t as, ClientData c);
    void dump(size_t as, ClientData c);

    Outcome &outcome() const;

    const int is() const;

---------------------------------------

const char *name()
    Purpose: get the id name of the object
    Input Arguments: None
    Return Value: the id name stored in the object.
    Notes: if no name is set, NULL will be returned
            the id name is used to identify this object from
            all other objects and should be unique
    Code Example:

void name(const char *val)
    Purpose: set the id name of the object
    Input Arguments: 1
        1. const char *val - new id name
    Return Value: None
    Notes: a copy of the memory location val will be stored
    Code Example:

const char *path()
    Purpose: get the path of the object
    Input Arguments: None
    Return Value: the path stored in the object.
    Notes: if no path is set, NULL will be returned
            the path tells where this object sits in the
            hierarchy of objects.
    Code Example:

void path(const char *val)
    Purpose: set the path of the object
    Input Arguments: 1
        1. const char *val - new path
    Return Value: None
    Notes: a copy of the memory location val will be stored
    Code Example:

const char *label()
    Purpose: get the label of the object
    Input Arguments: None
    Return Value: the label stored in the object.
    Notes: if no label is set, NULL will be returned
            the label is used by the graphical user interface.
    Code Example:

void label(const char *val)
    Purpose: set the label of the object
    Input Arguments: 1
        1. const char *val - new label
    Return Value: None
    Notes: a copy of the memory location val will be stored
    Code Example:

const char *desc()
    Purpose: get the description of the object
    Input Arguments: None
    Return Value: the description stored in the object.
    Notes: if no description is set, NULL will be returned
            the description is used by the graphical user
            interface to describe what type of data is being
            requested and how the input is used.
    Code Example:

void desc(const char *val)
    Purpose: set the description of the object
    Input Arguments: 1
        1. const char *val - new description
    Return Value: None
    Notes: a copy of the memory location val will be stored
    Code Example:

const char *hints()
    Purpose: get the hints of the object
    Input Arguments: None
    Return Value: the hints stored in the object.
    Notes: if no hints are set, NULL will be returned
            the hints are used by the graphical user interface
    Code Example:

void hints(const char *val)
    Purpose: set the hints of the object
    Input Arguments: 1
        1. const char *val - new hints
    Return Value: None
    Notes: a copy of the memory location val will be stored
    Code Example:

Array1D *axis(const char *name, const char *label,
              const char *desc, const char *units,
              const char *scale, const char *val, size_t size);
    Purpose: get a generic property from the property database
    Input Arguments: 7
        1. const char *name - axis id
        2. const char *label - axis label
        3. const char *desc - description of axis
        4. const char *units - units of axis
        5. const char *scale - scale of axis
        6. const double *val - array of data values as doubles
        7. size_t size - number of data values
    Return Value: pointer to newly created Array1D object
    Notes: valid options for scale are "log" and NULL. The newly
           created Array1D object is stored in the Curve object.
    Code Example:

Curve& delAxis(const char *name);
    Purpose: delete an axis stored in the object with the id
                matching the string stored in "name".
    Input Arguments: 1
        1. const char *name - id of the axis to delete
    Return Value: None
    Notes: memory for the Array1D object is free'd
    Code Example:

size_t data(const char *label, const double **arr) const;
    Purpose: retrieve the data associated with the axis named "label".
    Input Arguments: 2
        1. const char *label - name of axis holding the data
        2. const double **arr - pointer to returned data
    Return Value: number of elements in the returned array *arr
    Notes: None
    Code Example:

Array1D *getAxis(const char *name) const;
    Purpose: retrieve a pointer to a Array1D object representing
                the axis named "name"
    Input Arguments: 1
        1. const char *name - name of the axis to retrieve
    Return Value: pointer to Array1D object representing an axis
    Notes: None
    Code Example:

Array1D *getNthAxis(size_t n) const;
    Purpose: retrieve the n'th axis of this Curve object
    Input Arguments: 1
        1. size_t n - number of the axis to retrieve
    Return Value: pointer to the n'th Array1D object
    Notes: None
    Code Example:

const char *group() const;
    Purpose: get the group this Curve object is associated with
    Input Arguments: 0
    Return Value: the group this Curve object is associated with
    Notes: None
    Code Example:

void group(const char *g);
    Purpose: set the group this Curve object is associated with
    Input Arguments: 1
        1. const char *g - newly associated group name
    Return Value: None
    Notes: None
    Code Example:

size_t dims() const;
    Purpose: get the number of dimensions (axis)
    Input Arguments: 0
    Return Value: number of dimensions
    Notes: None
    Code Example:

const void *property (const char *key) const;
    Purpose: get a generic property from the property database
    Input Arguments: 1
        1. const char *key - property name
    Return Value: value of the property
    Notes: None
    Code Example:

void property (const char *key, const void *val, size_t nbytes);
    Purpose: set a generic property in the property database
    Input Arguments: 3
        1. const char *key - property name
        2. const void *val - property value
        3. size_t nbytes - size (in bytes) of the value
    Return Value: None
    Notes: A copy of the memory pointed to by val is stored
            in the property database
    Code Example:

const char *propstr (const char *key) const;
    Purpose: get a string property from the property database
    Input Arguments: 1
        1. const char *key - property name
    Return Value: value of the property
    Notes: None
    Code Example:

void propstr (const char *key, const char *val);
    Purpose: set a string property in the property database
    Input Arguments: 2
        1. const char *key - property name
        2. const char *val - property value
    Return Value: None
    Notes: A copy of the memory pointed to by val is stored
            in the property database
    Code Example:

void propremove (const char *key);
    Purpose: remove a property from the property database
    Input Arguments: 1
        1. const char *key - property name
    Return Value: value of the property
    Notes: None
    Code Example:

void vvalue(void *storage, size_t numHints, va_list arg) const;
    Purpose: return the value of the object after applying a
                varying number of hints about how the value
                should be configured
    Input Arguments: 3
        1. void *storage - the return value
        2. size_t numHints - number of hints provided
        3. va_list arg - list of hints specified as a va_list
    Return Value: None
    Notes: vvalue will parse out the recognisable hints from
                va_list arg. Values stored in the object are
                not changed.
    Code Example:

void random();
    Purpose: populate the object with a random value
    Input Arguments: 0
    Return Value: None
    Notes: the current value of this object will be populated
           with a random value that fits within the min and
           max if they were specified.
    Code Example:

Rp_Chain *diff(const Rp_Object &o);
    Purpose: return a linked list showing the differences between
             this object and Rp_Object &o
    Input Arguments: 1
        1. const Rp_Object &o - object to diff against
    Return Value: list of differences between objects
    Notes: None
    Code Example:

void configure(size_t as, ClientData c);
    Purpose: configure the object based on the data in "c".
                use "as" to determine the type of data in "c".
    Input Arguments: 2
        1. size_t as - type of data stored in "c".
                        valid values include:
                            RPCONFIG_XML
                            RPCONFIG_TREE
        2. ClientData c - data to configure the object from.
                            if as is...     then c should be...
                            RPCONFIG_XML    const char *xmltext
                            RPCONFIG_TREE   RP_ParserXML *object
    Return Value: None
    Notes: object is configured based on values in "c"
    Code Example:

void dump(size_t as, ClientData c);
    Purpose: dump the object values based to the object "c".
                use "as" to determine how to dump the data.
    Input Arguments: 2
        1. size_t as - type of data stored in "c".
                        valid values include:
                            RPCONFIG_XML
                            RPCONFIG_TREE
        2. ClientData c - data to configure the object from.
                            if as is...     then c should be...
                            RPCONFIG_XML    ClientDataXml *object
                            RPCONFIG_TREE   RP_ParserXML *object
    Return Value: None
    Notes: None
    Code Example:

Outcome &outcome() const;
    Purpose: return the status of this object as an Outcome.
    Input Arguments: 0
    Return Value: status of the object as an Outcome
    Notes: None
    Code Example:

const int is() const;
    Purpose: return an integer tag describing the object.
    Input Arguments: 0
    Return Value: integer tag unique to all number objects
    Notes: None
    Code Example:
