# ----------------------------------------------------------------------
#  COMPONENT: mainwin - main application window for regression tester 
#
#  This widget acts as the main window for the Rappture regression
#  tester.  Constructor accepts the location of the tool.xml of the new 
#  version to be tested, and the location of a directory containg test 
#  xml files.
# ======================================================================
#  AUTHOR:  Ben Rafferty, Purdue University
#  Copyright (c) 2010  Purdue Research Foundation
#
#  See the file "license.terms" for information on usage and
#  redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# ======================================================================
package require Itk
package require Rappture
package require RapptureGUI

namespace eval Rappture::Regression::MainWin { #forward declaration }

itcl::class Rappture::Regression::MainWin {
    inherit itk::Toplevel

    constructor {toolxml testdir args} { #defined later }
    public method runAll {args}
    public method runSelected {args}
    public method selectionHandler {}
    private method runTest {id args}

    private variable _testdir
    private variable _toolxml

}

# ----------------------------------------------------------------------
# CONSTRUCTOR
# ----------------------------------------------------------------------
itcl::body Rappture::Regression::MainWin::constructor {toolxml testdir args} {
    if {[file exists $toolxml]} {
        set _toolxml $toolxml
    } else {
        error "File \"$toolxml\" does not exist."
    }

    if {[file isdirectory $testdir]} {
        set _testdir $testdir
    } else {
        error "Directory \"$testdir\" does not exist."
    }

    itk_component add pw {
        panedwindow $itk_interior.pw
    } {
    }
    pack $itk_component(pw) -expand yes -fill both

    itk_component add tree {
        Rappture::Regression::TestTree $itk_component(pw).tree \
            -command "$this runSelected" -testdir $_testdir \
            -selectcommand "$this selectionHandler"
    }
    $itk_component(pw) add $itk_component(tree) -sticky nsew

    itk_component add view {
        Rappture::Regression::TestView $itk_component(pw).view
    }
    $itk_component(pw) add $itk_component(view) -sticky nsew

    # TODO: make panes scale proportionally when window grows

    eval itk_initialize $args
}

# ----------------------------------------------------------------------
# USAGE: runAll ?-force?
#
# When this method is invoked, all tests contained in the TestTree will
# be ran sequentially.
# ----------------------------------------------------------------------
itcl::body Rappture::Regression::MainWin::runAll {args} {
    set tests [$itk_component(tree) getTests]
    foreach id $tests {
        runTest $id $args
    }
}

# ----------------------------------------------------------------------
# USAGE: runSelected ?-force?
#
# When this method is invoked, all tests that are currently selected
# will be ran.  If a branch node (folder) is selected, all of its
# descendant tests will be ran as well.
# ----------------------------------------------------------------------
itcl::body Rappture::Regression::MainWin::runSelected {args} {
    set selected [$itk_component(tree) getSelected]
    foreach id $selected {
        runTest $id $args
    }
}

# ----------------------------------------------------------------------
# USAGE: runTest id ?-force?
#
# Called by runAll and runSelected to run a single test at tree node 
# specified by the given id.  In most cases, this method should not be
# called directly.  A driver object is generated by the makeDriver
# procedure in compare.tcl, and the results given by the new version are
# compared to the test xml by the compare procedure in compare.tcl
# ----------------------------------------------------------------------
itcl::body Rappture::Regression::MainWin::runTest {id args} {
    array set data [$itk_component(tree) getData $id]
    if {$data(ran) && [lsearch -exact $args "-force"]==-1} {
        # Already ran.  Skip.
        return
    }
    set data(result) "Running"
    $itk_component(tree) setData $id [array get data]

    set driver [Rappture::Regression::makeDriver $_toolxml $data(testxml)]
    #set driver [makeDriver $data(testxml)]
    set tool [Rappture::Tool ::#auto $driver [file dirname $_toolxml]]
    foreach {status result} [eval $tool run] break
    set data(ran) yes
    if {$status == 0 && [Rappture::library isvalid $result]} {
        set golden [Rappture::library $data(testxml)]
        set diffs [Rappture::Regression::compare $golden $result "output"]
        if {$diffs != ""} {
            set data(result) Fail
            set data(diffs) $diffs
        } else {
            set data(result) Pass
        }
    } else {
        set data(result) Error
    }
    $itk_component(tree) setData $id [array get data]

    # Call selectionHandler to refresh right hand side view
    selectionHandler

    # TODO: Remove runfile
}

# ----------------------------------------------------------------------
# USAGE: selectionHandler
#
# Used internally to communicate between the test tree and the right
# hand side whenever the tree's selection has changed.
# ----------------------------------------------------------------------
itcl::body Rappture::Regression::MainWin::selectionHandler {} {
    array set data [$itk_component(tree) getData focus]
    # Data array is empty for branch nodes
    if {[array names data] != ""} {
        if {$data(ran)} {
            switch $data(result) {
                Pass {$itk_component(view) showText "Test passed."}
                Fail {$itk_component(view) showText "Diffs: $data(diffs)"}
                Error {$itk_component(view) showText "Error while running test"}
            }
        } else {
            $itk_component(view) showText "Test has not ben ran."
        }
    } else {
        $itk_component(view) showDefault
    }
}

